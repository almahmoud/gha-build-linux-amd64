+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''flowFP'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'?repositories' for details

replacement repositories:
    CRAN: https://packagemanager.posit.co/cran/__linux__/jammy/latest

Bioconductor version 3.16 (BiocManager 1.30.19), R 4.2.2 (2022-10-31)
Installing package(s) 'flowFP'
also installing the dependencies ‘deldir’, ‘RcppEigen’, ‘Rhdf5lib’, ‘png’, ‘jpeg’, ‘interp’, ‘matrixStats’, ‘cytolib’, ‘S4Vectors’, ‘BH’, ‘RProtoBufLib’, ‘latticeExtra’, ‘RColorBrewer’, ‘hexbin’, ‘IDPmisc’, ‘flowCore’, ‘flowViz’, ‘Biobase’, ‘BiocGenerics’

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/deldir_1.0-6.tar.gz'
Content type 'binary/octet-stream' length 306171 bytes (298 KB)
==================================================
downloaded 298 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/RcppEigen_0.3.3.9.3.tar.gz'
Content type 'binary/octet-stream' length 1547173 bytes (1.5 MB)
==================================================
downloaded 1.5 MB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/Rhdf5lib_1.20.0.tar.gz'
Content type 'application/x-gzip' length 14649643 bytes (14.0 MB)
==================================================
downloaded 14.0 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/png_0.1-8.tar.gz'
Content type 'binary/octet-stream' length 39953 bytes (39 KB)
==================================================
downloaded 39 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/jpeg_0.1-10.tar.gz'
Content type 'binary/octet-stream' length 28493 bytes (27 KB)
==================================================
downloaded 27 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/interp_1.1-3.tar.gz'
Content type 'binary/octet-stream' length 1084022 bytes (1.0 MB)
==================================================
downloaded 1.0 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/matrixStats_0.63.0.tar.gz'
Content type 'binary/octet-stream' length 445385 bytes (434 KB)
==================================================
downloaded 434 KB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/cytolib_2.10.1.tar.gz'
Content type 'application/x-gzip' length 6046633 bytes (5.8 MB)
==================================================
downloaded 5.8 MB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/S4Vectors_0.36.1.tar.gz'
Content type 'application/x-gzip' length 623234 bytes (608 KB)
==================================================
downloaded 608 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/BH_1.81.0-1.tar.gz'
Content type 'binary/octet-stream' length 12941404 bytes (12.3 MB)
==================================================
downloaded 12.3 MB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/RProtoBufLib_2.10.0.tar.gz'
Content type 'application/x-gzip' length 2948236 bytes (2.8 MB)
==================================================
downloaded 2.8 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/latticeExtra_0.6-30.tar.gz'
Content type 'binary/octet-stream' length 2201783 bytes (2.1 MB)
==================================================
downloaded 2.1 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/RColorBrewer_1.1-3.tar.gz'
Content type 'binary/octet-stream' length 53064 bytes (51 KB)
==================================================
downloaded 51 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/hexbin_1.28.2.tar.gz'
Content type 'binary/octet-stream' length 1467681 bytes (1.4 MB)
==================================================
downloaded 1.4 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/IDPmisc_1.1.20.tar.gz'
Content type 'binary/octet-stream' length 783612 bytes (765 KB)
==================================================
downloaded 765 KB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/flowCore_2.10.0.tar.gz'
Content type 'application/x-gzip' length 7809092 bytes (7.4 MB)
==================================================
downloaded 7.4 MB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/flowViz_1.62.0.tar.gz'
Content type 'application/x-gzip' length 934858 bytes (912 KB)
==================================================
downloaded 912 KB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/Biobase_2.58.0.tar.gz'
Content type 'application/x-gzip' length 1792896 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/BiocGenerics_0.44.0.tar.gz'
Content type 'application/x-gzip' length 47711 bytes (46 KB)
==================================================
downloaded 46 KB

trying URL 'https://bioconductor.org/packages/3.16/bioc/src/contrib/flowFP_1.56.3.tar.gz'
Content type 'application/x-gzip' length 5363957 bytes (5.1 MB)
==================================================
downloaded 5.1 MB

* installing *binary* package ‘deldir’ ...
* ‘deldir’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘deldir’ as ‘deldir_1.0-6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (deldir)
* installing *binary* package ‘RcppEigen’ ...
* ‘RcppEigen’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppEigen’ as ‘RcppEigen_0.3.3.9.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppEigen)
* installing *source* package ‘Rhdf5lib’ ...
** using staged installation
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether we are using the GNU C++ compiler... yes
checking whether g++ -std=gnu++14 accepts -g... yes
COMPILER = gcc
checking whether C compiler accepts -w... yes
checking whether to use -Wl,-rpath setting... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for zlib.h... yes
checking szlib.h usability... yes
checking szlib.h presence... yes
checking for szlib.h... yes
checking libaec.h usability... yes
checking libaec.h presence... yes
checking for libaec.h... yes
checking for SZ_BufftoBuffCompress in -lsz... yes
checking for aec_buffer_encode in -lsz... yes
checking curl/curl.h usability... yes
checking curl/curl.h presence... yes
checking for curl/curl.h... yes
checking openssl/evp.h usability... yes
checking openssl/evp.h presence... yes
checking for openssl/evp.h... yes
checking openssl/hmac.h usability... yes
checking openssl/hmac.h presence... yes
checking for openssl/hmac.h... yes
checking openssl/sha.h usability... yes
checking openssl/sha.h presence... yes
checking for openssl/sha.h... yes
checking for curl_global_init in -lcurl... yes
checking for EVP_sha256 in -lcrypto... yes
S3_VFD=--enable-ros3-vfd
configure: creating ./config.status
config.status: creating src/Makevars
** libs
gunzip -dc hdf5small_cxx_hl_1.10.7.tar.gz | tar xf -;
cd hdf5; \
./configure --with-pic --enable-shared=no --enable-cxx --enable-hl \
--enable-tests=no --enable-tools=no \
--with-szlib=yes --with-zlib=yes \
--enable-ros3-vfd \
--enable-sharedlib-rpath \
CC='gcc' CXX='g++ -std=gnu++14' \
CPPFLAGS='-I/usr/local/include' \
CFLAGS='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -w -fpic' \
CXXFLAGS='-w -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -fpic'; \
make lib
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking whether to enable maintainer-specific portions of Makefiles... no
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking shell variables initial values... done
checking if basename works... yes
checking if xargs works... yes
checking for cached host... none
checking for config x86_64-unknown-linux-gnu... no
checking for config x86_64-unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-unknown... no
checking for config linux-gnu... found
compiler 'gcc' is GNU gcc-11.3.0
compiler 'gfortran' is GNU gfortran-11.3.0
compiler 'g++ -std=gnu++14' is GNU g++-11.3.0
checking for config ./config/site-specific/host-buildkitsandbox... no
checking for clang sanitizer checks... checking build mode... production
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking if unsupported combinations of configure options are allowed... no
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for off_t... yes
checking for size_t... yes
checking for ssize_t... yes
checking for ptrdiff_t... yes
checking whether byte ordering is bigendian... no
checking size of char... 1
checking size of short... 2
checking size of int... 4
checking size of unsigned... 4
checking size of long... 8
checking size of long long... 8
checking size of __int64... 0
checking size of float... 4
checking size of double... 8
checking size of long double... 16
checking size of __float128... 16
checking size of _Quad... 0
checking quadmath.h usability... yes
checking quadmath.h presence... yes
checking for quadmath.h... yes
checking maximum decimal precision for C... 33
checking if Fortran interface enabled... no
checking whether we are using the GNU C++ compiler... yes
checking whether g++ -std=gnu++14 accepts -g... yes
checking dependency style of g++ -std=gnu++14... gcc3
checking how to run the C++ preprocessor... g++ -std=gnu++14 -E
checking if c++ interface enabled... yes
checking if g++ -std=gnu++14 needs old style header files in includes... no
checking if g++ -std=gnu++14 can handle namespaces... yes
checking if g++ -std=gnu++14 can handle static cast... yes
checking if g++ -std=gnu++14 has offsetof extension... yes
checking if the high-level library is enabled... yes
checking for ar... ar
checking whether make sets $(MAKE)... (cached) yes
checking for tr... /usr/bin/tr
checking if srcdir= and time commands work together... no
checking if Java JNI interface enabled... no
checking if building tests is disabled... Building HDF5 tests is disabled
checking if building tools is disabled... Building HDF5 tools is disabled
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 3145728
checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop
checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... yes
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking for shl_load... no
checking for shl_load in -ldld... no
checking for dlopen... yes
checking whether a program can dlopen itself... yes
checking whether a statically linked program can dlopen itself... no
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=gnu++14 -E
checking for ld used by g++ -std=gnu++14... /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes
checking whether the g++ -std=gnu++14 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking for g++ -std=gnu++14 option to produce PIC... -fPIC -DPIC
checking if g++ -std=gnu++14 PIC flag -fPIC -DPIC works... yes
checking if g++ -std=gnu++14 static flag -static works... yes
checking if g++ -std=gnu++14 supports -c -o file.o... yes
checking if g++ -std=gnu++14 supports -c -o file.o... (cached) yes
checking whether the g++ -std=gnu++14 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... (cached) GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking if we should install only statically linked executables... no
checking if -Wl,-rpath should be used to link shared libs in nondefault directories... yes
checking for ceil in -lm... yes
checking for dlopen in -ldl... yes
checking for ANSI C header files... (cached) yes
checking whether time.h and sys/time.h may both be included... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for unistd.h... (cached) yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking for sys/stat.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking for sys/types.h... (cached) yes
checking sys/file.h usability... yes
checking sys/file.h presence... yes
checking for sys/file.h... yes
checking stddef.h usability... yes
checking stddef.h presence... yes
checking for stddef.h... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking features.h usability... yes
checking features.h presence... yes
checking for features.h... yes
checking dirent.h usability... yes
checking dirent.h presence... yes
checking for dirent.h... yes
checking for stdint.h... (cached) yes
checking stdbool.h usability... yes
checking stdbool.h presence... yes
checking for stdbool.h... yes
checking netdb.h usability... yes
checking netdb.h presence... yes
checking for netdb.h... yes
checking netinet/in.h usability... yes
checking netinet/in.h presence... yes
checking for netinet/in.h... yes
checking arpa/inet.h usability... yes
checking arpa/inet.h presence... yes
checking for arpa/inet.h... yes
checking io.h usability... no
checking io.h presence... no
checking for io.h... no
checking winsock2.h usability... no
checking winsock2.h presence... no
checking for winsock2.h... no
checking sys/timeb.h usability... yes
checking sys/timeb.h presence... yes
checking for sys/timeb.h... yes
checking for _FILE_OFFSET_BITS value needed for large files... no
checking size of int8_t... 1
checking size of uint8_t... 1
checking size of int_least8_t... 1
checking size of uint_least8_t... 1
checking size of int_fast8_t... 1
checking size of uint_fast8_t... 1
checking size of int16_t... 2
checking size of uint16_t... 2
checking size of int_least16_t... 2
checking size of uint_least16_t... 2
checking size of int_fast16_t... 8
checking size of uint_fast16_t... 8
checking size of int32_t... 4
checking size of uint32_t... 4
checking size of int_least32_t... 4
checking size of uint_least32_t... 4
checking size of int_fast32_t... 8
checking size of uint_fast32_t... 8
checking size of int64_t... 8
checking size of uint64_t... 8
checking size of int_least64_t... 8
checking size of uint_least64_t... 8
checking size of int_fast64_t... 8
checking size of uint_fast64_t... 8
checking size of size_t... 8
checking size of ssize_t... 8
checking size of ptrdiff_t... 8
checking size of off_t... 8
checking size of bool... 1
checking size of time_t... 8
checking if dev_t is scalar... yes
checking for dmalloc library... suppressed
checking zlib.h usability... yes
checking zlib.h presence... yes
checking for zlib.h... yes
checking for compress2 in -lz... yes
checking for compress2... yes
checking szlib.h usability... yes
checking szlib.h presence... yes
checking for szlib.h... yes
checking libaec.h usability... yes
checking libaec.h presence... yes
checking for libaec.h... yes
checking for aec_encode in -laec... yes
checking for SZ_BufftoBuffCompress in -lsz... yes
checking for szlib encoder... yes
checking for thread safe support... no
checking whether CLOCK_MONOTONIC is declared... yes
checking for tm_gmtoff in struct tm... yes
checking for global timezone variable... yes
checking for st_blocks in struct stat... no
checking for _getvideoconfig... no
checking for gettextinfo... no
checking for GetConsoleScreenBufferInfo... no
checking for getpwuid... yes
checking for _scrsize... no
checking for ioctl... yes
checking for struct videoconfig... no
checking for struct text_info... no
checking for TIOCGWINSZ... yes
checking for TIOCGETD... yes
checking for library containing clock_gettime... none required
checking for alarm... yes
checking for clock_gettime... yes
checking for difftime... yes
checking for fcntl... yes
checking for flock... yes
checking for fork... yes
checking for frexpf... yes
checking for frexpl... yes
checking for gethostname... yes
checking for getrusage... yes
checking for gettimeofday... yes
checking for lstat... yes
checking for rand_r... yes
checking for random... yes
checking for setsysinfo... no
checking for signal... yes
checking for longjmp... yes
checking for setjmp... yes
checking for siglongjmp... yes
checking for sigsetjmp... no
checking for sigprocmask... yes
checking for snprintf... yes
checking for srandom... yes
checking for strdup... yes
checking for symlink... yes
checking for system... yes
checking for strtoll... yes
checking for strtoull... yes
checking for tmpfile... yes
checking for asprintf... yes
checking for vasprintf... yes
checking for vsnprintf... yes
checking for waitpid... yes
checking for roundf... yes
checking for lroundf... yes
checking for llroundf... yes
checking for round... yes
checking for lround... yes
checking for llround... yes
checking for an ANSI C-conforming const... yes
checking if the compiler understands  __inline__... yes
checking if the compiler understands __inline... yes
checking if the compiler understands inline... yes
checking for __attribute__ extension... yes
checking for __func__ extension... yes
checking for __FUNCTION__ extension... yes
checking for C99 designated initialization support... yes
checking how to print long long... %ld and %lu
checking enable debugging symbols... no
checking enable asserts... no
checking enable developer warnings... no
checking profiling... no
checking optimization level... high
checking enable file locking... best-effort
checking for internal debug output... none
checking whether function stack tracking is enabled... no
checking for API tracing... no
checking whether a memory checking tool will be used... no
checking whether internal memory allocation sanity checking is used... no
checking for parallel support files... skipped
checking whether O_DIRECT is declared... yes
checking for posix_memalign... yes
checking if the direct I/O virtual file driver (VFD) is enabled... no
checking if the Mirror virtual file driver (VFD) is enabled... no
checking curl/curl.h usability... yes
checking curl/curl.h presence... yes
checking for curl/curl.h... yes
checking openssl/evp.h usability... yes
checking openssl/evp.h presence... yes
checking for openssl/evp.h... yes
checking openssl/hmac.h usability... yes
checking openssl/hmac.h presence... yes
checking for openssl/hmac.h... yes
checking openssl/sha.h usability... yes
checking openssl/sha.h presence... yes
checking for openssl/sha.h... yes
checking for curl_global_init in -lcurl... yes
checking for EVP_sha256 in -lcrypto... yes
checking if the Read-Only S3 virtual file driver (VFD) is enabled... yes
checking for libhdfs... suppressed
checking for custom examples path definition... ${prefix}/share/hdf5_examples
checking for custom plugin default path definition... /usr/local/hdf5/lib/plugin
checking whether exception handling functions is checked during data conversions... yes
checking whether data accuracy is guaranteed during data conversions... yes
checking if the machine has window style path name... no
checking if using special algorithm to convert long double to (unsigned) long values... no
checking if using special algorithm to convert (unsigned) long to long double values... no
checking if correctly converting long double to (unsigned) long long values... yes
checking if correctly converting (unsigned) long long to long double values... yes
checking if the system is IBM ppc64le and cannot correctly convert some long double values... no
checking additional programs should be built... no
checking if deprecated public symbols are available... yes
checking which version of public symbols to use by default... v110
checking whether to perform strict file format checks... no
checking for pread... yes
checking for pwrite... yes
checking whether to use pread/pwrite instead of read/write in certain VFDs... yes
checking whether to have library information embedded in the executables... yes
checking if alignment restrictions are strictly enforced... no
configure: creating ./config.lt
config.lt: creating libtool
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating src/libhdf5.settings
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating utils/Makefile
config.status: creating utils/mirror_vfd/Makefile
config.status: creating bin/h5cc
config.status: creating bin/Makefile
config.status: creating c++/Makefile
config.status: creating c++/src/Makefile
config.status: creating c++/src/h5c++
config.status: creating hl/Makefile
config.status: creating hl/src/Makefile
config.status: creating hl/c++/Makefile
config.status: creating hl/c++/src/Makefile
config.status: creating src/H5config.h
config.status: executing pubconf commands
creating src/H5pubconf.h
Post process src/libhdf5.settings
config.status: executing depfiles commands
config.status: executing libtool commands
config.status: executing .classes commands
	    SUMMARY OF THE HDF5 CONFIGURATION
	    =================================

General Information:
-------------------
                   HDF5 Version: 1.10.7
                  Configured on: Fri Jan 27 10:56:04 UTC 2023
                  Configured by: root@buildkitsandbox
                    Host system: x86_64-unknown-linux-gnu
              Uname information: Linux buildkitsandbox 5.15.0-1031-azure #38-Ubuntu SMP Mon Jan 9 12:49:59 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux
                       Byte sex: little-endian
             Installation point: /tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hdf5

Compiling Options:
------------------
                     Build Mode: production
              Debugging Symbols: no
                        Asserts: no
                      Profiling: no
             Optimization Level: high

Linking Options:
----------------
                      Libraries: static
  Statically Linked Executables: 
                        LDFLAGS: 
                     H5_LDFLAGS: 
                     AM_LDFLAGS: 
                Extra libraries: -lcrypto -lcurl -lsz -laec -lz -ldl -lm 
                       Archiver: ar
                       AR_FLAGS: cr
                         Ranlib: ranlib

Languages:
----------
                              C: yes
                     C Compiler: /usr/bin/gcc
                       CPPFLAGS: -I/usr/local/include
                    H5_CPPFLAGS: -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L   -DNDEBUG -UH5_DEBUG_API
                    AM_CPPFLAGS: 
                        C Flags: -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -w -fpic
                     H5 C Flags:  -std=c99  -Wno-c++-compat -Wno-format-nonliteral -Wshadow -Wundef -Wwrite-strings -Wlarger-than=2560 -Wlogical-op -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wsync-nand -Wdouble-promotion -Wtrampolines -Wstack-usage=8192 -Wmaybe-uninitialized -Wdate-time -Warray-bounds=2 -Wc99-c11-compat -Wduplicated-cond -Whsa -Wnormalized -Wunused-const-variable -Walloca -Walloc-zero -Wduplicated-branches -Wimplicit-fallthrough=5 -Wrestrict -Wattribute-alias -Wshift-overflow=2 -Wattribute-alias=2 -Wmissing-profile -fstdarg-opt -s -Wno-aggregate-return -Wno-inline -Wno-missing-format-attribute -Wno-missing-noreturn -Wno-overlength-strings -Wno-jump-misses-init -Wno-suggest-attribute=const -Wno-suggest-attribute=noreturn -Wno-suggest-attribute=pure -Wno-suggest-attribute=format -Wno-suggest-attribute=cold -Wno-suggest-attribute=malloc -O3  -Werror=bad-function-cast -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=missing-declarations -Werror=missing-prototypes -Werror=nested-externs -Werror=old-style-definition -Werror=packed -Werror=pointer-sign -Werror=pointer-to-int-cast -Werror=redundant-decls -Werror=strict-prototypes -Werror=switch -Wunused-function -Wformat -Werror=incompatible-pointer-types -Werror=shadow -Wcast-function-type -Wmaybe-uninitialized
                     AM C Flags: 
               Shared C Library: no
               Static C Library: yes


                        Fortran: no

                            C++: yes
                   C++ Compiler: /usr/bin/g++ -std=gnu++14
                      C++ Flags: -w -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -fpic
                   H5 C++ Flags:   -Wall -Wconversion -Wctor-dtor-privacy -Wextra -Wfloat-equal -Wformat=2 -Winit-self -Winvalid-pch -Wmissing-include-dirs -Wno-format-nonliteral -Wnon-virtual-dtor -Woverloaded-virtual -Wreorder -Wshadow -Wsign-promo -Wundef -Wwrite-strings -pedantic -Wlarger-than=2560 -Wlogical-op -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wsync-nand -Wdouble-promotion -Wtrampolines -Wstack-usage=8192 -Wmaybe-uninitialized -Wdate-time -Wopenmp-simd -Warray-bounds=2 -Wduplicated-cond -Whsa -Wnormalized -Wunused-const-variable -Walloca -Walloc-zero -Wduplicated-branches -Wimplicit-fallthrough=5 -Wrestrict -Wattribute-alias -Wshift-overflow=2 -Wattribute-alias=2 -Wmissing-profile -fstdarg-opt -s -O3  -Wcast-align -Wmissing-declarations -Werror=packed -Werror=redundant-decls -Werror=switch -Wunused-but-set-variable -Werror=unused-function -Werror=unused-variable -Wunused-parameter -Werror=shadow
                   AM C++ Flags: 
             Shared C++ Library: no
             Static C++ Library: yes

                           Java: no


Features:
---------
                   Parallel HDF5: no
Parallel Filtered Dataset Writes: no
              Large Parallel I/O: no
              High-level library: yes
                Build HDF5 Tests: no
                Build HDF5 Tools: no
                    Threadsafety: no
             Default API mapping: v110
  With deprecated public symbols: yes
          I/O filters (external): deflate(zlib),szip(encoder)
                             MPE: no
                      Direct VFD: no
                      Mirror VFD: no
              (Read-Only) S3 VFD: yes
            (Read-Only) HDFS VFD: no
                         dmalloc: no
  Packages w/ extra debug output: none
                     API tracing: no
            Using memory checker: no
 Memory allocation sanity checks: no
          Function stack tracing: no
                Use file locking: best-effort
       Strict file format checks: no
    Optimization instrumentation: no
make[1]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5'
for d in src . c++ hl; do                                \
  if test $d != .; then                                        \
   (cd $d && make  lib) || exit 1;            \
  fi;                                                           \
done
make[2]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/src'
make[3]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/src'
  CC       H5.lo
  CC       H5checksum.lo
  CC       H5dbg.lo
  CC       H5system.lo
  CC       H5timer.lo
  CC       H5trace.lo
  CC       H5A.lo
  CC       H5Abtree2.lo
  CC       H5Adense.lo
  CC       H5Adeprec.lo
  CC       H5Aint.lo
  CC       H5Atest.lo
  CC       H5AC.lo
  CC       H5ACdbg.lo
  CC       H5ACproxy_entry.lo
  CC       H5B.lo
  CC       H5Bcache.lo
  CC       H5Bdbg.lo
  CC       H5B2.lo
  CC       H5B2cache.lo
  CC       H5B2dbg.lo
  CC       H5B2hdr.lo
  CC       H5B2int.lo
  CC       H5B2internal.lo
  CC       H5B2leaf.lo
  CC       H5B2stat.lo
  CC       H5B2test.lo
  CC       H5C.lo
  CC       H5Cdbg.lo
  CC       H5Cepoch.lo
  CC       H5Cimage.lo
  CC       H5Clog.lo
  CC       H5Clog_json.lo
  CC       H5Clog_trace.lo
  CC       H5Cprefetched.lo
  CC       H5Cquery.lo
  CC       H5Ctag.lo
  CC       H5Ctest.lo
  CC       H5CS.lo
  CC       H5CX.lo
  CC       H5D.lo
  CC       H5Dbtree.lo
  CC       H5Dbtree2.lo
  CC       H5Dchunk.lo
  CC       H5Dcompact.lo
  CC       H5Dcontig.lo
  CC       H5Ddbg.lo
  CC       H5Ddeprec.lo
  CC       H5Dearray.lo
  CC       H5Defl.lo
  CC       H5Dfarray.lo
  CC       H5Dfill.lo
  CC       H5Dint.lo
  CC       H5Dio.lo
  CC       H5Dlayout.lo
  CC       H5Dnone.lo
  CC       H5Doh.lo
  CC       H5Dscatgath.lo
  CC       H5Dselect.lo
  CC       H5Dsingle.lo
  CC       H5Dtest.lo
  CC       H5Dvirtual.lo
  CC       H5E.lo
  CC       H5Edeprec.lo
  CC       H5Eint.lo
  CC       H5EA.lo
  CC       H5EAcache.lo
  CC       H5EAdbg.lo
  CC       H5EAdblkpage.lo
  CC       H5EAdblock.lo
  CC       H5EAhdr.lo
  CC       H5EAiblock.lo
  CC       H5EAint.lo
  CC       H5EAsblock.lo
  CC       H5EAstat.lo
  CC       H5EAtest.lo
  CC       H5F.lo
  CC       H5Faccum.lo
  CC       H5Fcwfs.lo
  CC       H5Fdbg.lo
  CC       H5Fdeprec.lo
  CC       H5Fefc.lo
  CC       H5Ffake.lo
  CC       H5Fint.lo
  CC       H5Fio.lo
  CC       H5Fmount.lo
  CC       H5Fquery.lo
  CC       H5Fsfile.lo
  CC       H5Fspace.lo
  CC       H5Fsuper.lo
  CC       H5Fsuper_cache.lo
  CC       H5Ftest.lo
  CC       H5FA.lo
  CC       H5FAcache.lo
  CC       H5FAdbg.lo
  CC       H5FAdblock.lo
  CC       H5FAdblkpage.lo
  CC       H5FAhdr.lo
  CC       H5FAint.lo
  CC       H5FAstat.lo
  CC       H5FAtest.lo
  CC       H5FD.lo
  CC       H5FDcore.lo
  CC       H5FDfamily.lo
  CC       H5FDhdfs.lo
  CC       H5FDint.lo
  CC       H5FDlog.lo
  CC       H5FDmulti.lo
  CC       H5FDsec2.lo
  CC       H5FDspace.lo
  CC       H5FDsplitter.lo
  CC       H5FDstdio.lo
  CC       H5FDtest.lo
  CC       H5FL.lo
  CC       H5FO.lo
  CC       H5FS.lo
  CC       H5FScache.lo
  CC       H5FSdbg.lo
  CC       H5FSint.lo
  CC       H5FSsection.lo
  CC       H5FSstat.lo
  CC       H5FStest.lo
  CC       H5G.lo
  CC       H5Gbtree2.lo
  CC       H5Gcache.lo
  CC       H5Gcompact.lo
  CC       H5Gdense.lo
  CC       H5Gdeprec.lo
  CC       H5Gent.lo
  CC       H5Gint.lo
  CC       H5Glink.lo
  CC       H5Gloc.lo
  CC       H5Gname.lo
  CC       H5Gnode.lo
  CC       H5Gobj.lo
  CC       H5Goh.lo
  CC       H5Groot.lo
  CC       H5Gstab.lo
  CC       H5Gtest.lo
  CC       H5Gtraverse.lo
  CC       H5HF.lo
  CC       H5HFbtree2.lo
  CC       H5HFcache.lo
  CC       H5HFdbg.lo
  CC       H5HFdblock.lo
  CC       H5HFdtable.lo
  CC       H5HFhdr.lo
  CC       H5HFhuge.lo
  CC       H5HFiblock.lo
  CC       H5HFiter.lo
  CC       H5HFman.lo
  CC       H5HFsection.lo
  CC       H5HFspace.lo
  CC       H5HFstat.lo
  CC       H5HFtest.lo
  CC       H5HFtiny.lo
  CC       H5HG.lo
  CC       H5HGcache.lo
  CC       H5HGdbg.lo
  CC       H5HGquery.lo
  CC       H5HL.lo
  CC       H5HLcache.lo
  CC       H5HLdbg.lo
  CC       H5HLint.lo
  CC       H5HLprfx.lo
  CC       H5HLdblk.lo
  CC       H5HP.lo
  CC       H5I.lo
  CC       H5Itest.lo
  CC       H5L.lo
  CC       H5Lexternal.lo
  CC       H5make_libsettings.o
  CCLD     H5make_libsettings
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5make_libsettings > H5lib_settings.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5lib_settings.c ; exit 1)
  CC       H5lib_settings.lo
  CC       H5MF.lo
  CC       H5MFaggr.lo
  CC       H5MFdbg.lo
  CC       H5MFsection.lo
  CC       H5MM.lo
  CC       H5MP.lo
  CC       H5MPtest.lo
  CC       H5O.lo
  CC       H5Odeprec.lo
  CC       H5Oainfo.lo
  CC       H5Oalloc.lo
  CC       H5Oattr.lo
  CC       H5Oattribute.lo
  CC       H5Obogus.lo
  CC       H5Obtreek.lo
  CC       H5Ocache.lo
  CC       H5Ocache_image.lo
  CC       H5Ochunk.lo
  CC       H5Ocont.lo
  CC       H5Ocopy.lo
  CC       H5Odbg.lo
  CC       H5Odrvinfo.lo
  CC       H5Odtype.lo
  CC       H5Oefl.lo
  CC       H5Ofill.lo
  CC       H5Oflush.lo
  CC       H5Ofsinfo.lo
  CC       H5Oginfo.lo
  CC       H5Oint.lo
  CC       H5Olayout.lo
  CC       H5Olinfo.lo
  CC       H5Olink.lo
  CC       H5Omessage.lo
  CC       H5Omtime.lo
  CC       H5Oname.lo
  CC       H5Onull.lo
  CC       H5Opline.lo
  CC       H5Orefcount.lo
  CC       H5Osdspace.lo
  CC       H5Oshared.lo
  CC       H5Oshmesg.lo
  CC       H5Ostab.lo
  CC       H5Otest.lo
  CC       H5Ounknown.lo
  CC       H5P.lo
  CC       H5Pacpl.lo
  CC       H5Pdapl.lo
  CC       H5Pdcpl.lo
  CC       H5Pdeprec.lo
  CC       H5Pdxpl.lo
  CC       H5Pencdec.lo
  CC       H5Pfapl.lo
  CC       H5Pfcpl.lo
  CC       H5Pfmpl.lo
  CC       H5Pgcpl.lo
  CC       H5Pint.lo
  CC       H5Plapl.lo
  CC       H5Plcpl.lo
  CC       H5Pocpl.lo
  CC       H5Pocpypl.lo
  CC       H5Pstrcpl.lo
  CC       H5Ptest.lo
  CC       H5PB.lo
  CC       H5PL.lo
  CC       H5PLint.lo
  CC       H5PLpath.lo
  CC       H5PLplugin_cache.lo
  CC       H5R.lo
  CC       H5Rint.lo
  CC       H5Rdeprec.lo
  CC       H5UC.lo
  CC       H5RS.lo
  CC       H5S.lo
  CC       H5Sall.lo
  CC       H5Sdbg.lo
  CC       H5Shyper.lo
  CC       H5Snone.lo
  CC       H5Spoint.lo
  CC       H5Sselect.lo
  CC       H5Stest.lo
  CC       H5SL.lo
  CC       H5SM.lo
  CC       H5SMbtree2.lo
  CC       H5SMcache.lo
  CC       H5SMmessage.lo
  CC       H5SMtest.lo
  CC       H5ST.lo
  CC       H5T.lo
  CC       H5Tarray.lo
  CC       H5Tbit.lo
  CC       H5Tcommit.lo
  CC       H5Tcompound.lo
  CC       H5Tconv.lo
  CC       H5Tcset.lo
  CC       H5Tdbg.lo
  CC       H5Tdeprec.lo
  CC       H5Tenum.lo
  CC       H5Tfields.lo
  CC       H5Tfixed.lo
  CC       H5Tfloat.lo
  CC       H5detect.o
  CCLD     H5detect
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo  |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5detect > H5Tinit.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5Tinit.c ; exit 1)
  CC       H5Tinit.lo
  CC       H5Tnative.lo
  CC       H5Toffset.lo
  CC       H5Toh.lo
  CC       H5Topaque.lo
  CC       H5Torder.lo
  CC       H5Tpad.lo
  CC       H5Tprecis.lo
  CC       H5Tstrpad.lo
  CC       H5Tvisit.lo
  CC       H5Tvlen.lo
  CC       H5TS.lo
  CC       H5VM.lo
  CC       H5WB.lo
  CC       H5Z.lo
  CC       H5Zdeflate.lo
  CC       H5Zfletcher32.lo
  CC       H5Znbit.lo
  CC       H5Zshuffle.lo
  CC       H5Zscaleoffset.lo
  CC       H5Zszip.lo
  CC       H5Ztrans.lo
  CC       H5FDros3.lo
  CC       H5FDs3comms.lo
  CCLD     libhdf5.la
make[3]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/src'
make[2]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/src'
make[2]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++'
make[3]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++'
make[3]: Nothing to be done for 'build-lib'.
make[3]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++'
+ cd src
+ make lib
make[3]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++/src'
make[4]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++/src'
  CXX      H5Exception.lo
  CXX      H5IdComponent.lo
  CXX      H5DataSpace.lo
  CXX      H5PropList.lo
  CXX      H5Library.lo
  CXX      H5FaccProp.lo
  CXX      H5FcreatProp.lo
  CXX      H5LcreatProp.lo
  CXX      H5LaccProp.lo
  CXX      H5DaccProp.lo
  CXX      H5DxferProp.lo
  CXX      H5DcreatProp.lo
  CXX      H5Location.lo
  CXX      H5AbstractDs.lo
  CXX      H5Attribute.lo
  CXX      H5Object.lo
  CXX      H5OcreatProp.lo
  CXX      H5DataType.lo
  CXX      H5AtomType.lo
  CXX      H5PredType.lo
  CXX      H5EnumType.lo
  CXX      H5IntType.lo
  CXX      H5FloatType.lo
  CXX      H5StrType.lo
  CXX      H5ArrayType.lo
  CXX      H5VarLenType.lo
  CXX      H5CompType.lo
  CXX      H5DataSet.lo
  CXX      H5CommonFG.lo
  CXX      H5Group.lo
  CXX      H5File.lo
  CXXLD    libhdf5_cpp.la
make[4]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++/src'
make[3]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++/src'
make[2]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/c++'
make[2]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl'
make[3]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl'
make[3]: Nothing to be done for 'build-lib'.
make[3]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl'
+ cd src
+ make lib
make[3]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/src'
make[4]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/src'
  CC       H5DO.lo
  CC       H5DS.lo
  CC       H5IM.lo
  CC       H5LT.lo
  CC       H5LTanalyze.lo
  CC       H5LTparse.lo
  CC       H5PT.lo
  CC       H5TB.lo
  CC       H5LD.lo
  CCLD     libhdf5_hl.la
make[4]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/src'
make[3]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/src'
+ cd c++
+ make lib
make[3]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++'
make[4]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++'
make[4]: Nothing to be done for 'build-lib'.
make[4]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++'
+ cd src
+ make lib
make[4]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++/src'
make[5]: Entering directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++/src'
  CXX      H5PacketTable.lo
  CXXLD    libhdf5_hl_cpp.la
make[5]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++/src'
make[4]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++/src'
make[3]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl/c++'
make[2]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5/hl'
make[1]: Leaving directory '/tmp/RtmpDNYWra/R.INSTALL6b4fa3a671/Rhdf5lib/src/hdf5'
mkdir -p "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp ""hdf5/src"/"*.h "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp ""hdf5/c++/src"/"*.h "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp ""hdf5/hl/src"/"*.h "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp ""hdf5/hl/c++/src"/"*.h "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp ""hdf5/src"/"libhdf5.settings "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
mkdir -p "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp ""hdf5/src/.libs/libhdf5.a"" "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp ""hdf5/c++/src/.libs/libhdf5_cpp.a"" "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp ""hdf5/hl/src/.libs/libhdf5_hl.a"" "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp ""hdf5/hl/c++/src/.libs/libhdf5_hl_cpp.a"" "/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Rhdf5lib.c -o Rhdf5lib.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o Rhdf5lib.so Rhdf5lib.o /tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/libhdf5.a -lsz -laec -lz -L/usr/local/lib/R/lib -lR
installing to /tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘Rhdf5lib’ as ‘Rhdf5lib_1.20.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Rhdf5lib)
* installing *binary* package ‘png’ ...
* ‘png’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘png’ as ‘png_0.1-8_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (png)
* installing *binary* package ‘jpeg’ ...
* ‘jpeg’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘jpeg’ as ‘jpeg_0.1-10_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (jpeg)
* installing *binary* package ‘matrixStats’ ...
* ‘matrixStats’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘matrixStats’ as ‘matrixStats_0.63.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (matrixStats)
* installing *binary* package ‘BH’ ...
* ‘BH’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘BH’ as ‘BH_1.81.0-1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BH)
* installing *source* package ‘RProtoBufLib’ ...
** using staged installation
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether we are using the GNU C++ compiler... yes
checking whether g++ -std=gnu++14 accepts -g... yes
untarring protobuf ...
building protobuf...
checking whether to enable maintainer-specific portions of Makefiles... yes
checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-gnu
checking target system type... x86_64-pc-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether UID '0' is supported by ustar format... yes
checking whether GID '0' is supported by ustar format... yes
checking how to create a ustar tar archive... gnutar
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking whether we are using the GNU C++ compiler... yes
checking whether g++ -std=gnu++14 accepts -g... yes
checking dependency style of g++ -std=gnu++14... gcc3
checking how to run the C preprocessor... gcc -E
checking for gcc... gcc
checking whether we are using the GNU C compiler... (cached) yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... (cached) none needed
checking whether gcc understands -c and -o together... (cached) yes
checking dependency style of gcc... (cached) gcc3
checking how to run the C preprocessor... gcc -E
checking how to run the C++ preprocessor... g++ -std=gnu++14 -E
checking for g++... g++
checking whether we are using the GNU C++ compiler... (cached) yes
checking whether g++ accepts -g... yes
checking dependency style of g++... (cached) gcc3
checking how to run the C++ preprocessor... g++ -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking minix/config.h usability... no
checking minix/config.h presence... no
checking for minix/config.h... no
checking whether it is safe to define __EXTENSIONS__... yes
checking for ar... ar
checking the archiver (ar) interface... ar
checking for gcc... gcc
checking whether we are using the GNU Objective C compiler... no
checking whether gcc accepts -g... no
checking dependency style of gcc... gcc3
checking C++ compiler flags...... use user-supplied: -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g
checking whether __SUNPRO_CC is declared... no
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 3145728
checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... no
checking how to run the C++ preprocessor... g++ -std=gnu++14 -E
checking for ld used by g++ -std=gnu++14... /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes
checking whether the g++ -std=gnu++14 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking for g++ -std=gnu++14 option to produce PIC... -fPIC -DPIC
checking if g++ -std=gnu++14 PIC flag -fPIC -DPIC works... yes
checking if g++ -std=gnu++14 static flag -static works... yes
checking if g++ -std=gnu++14 supports -c -o file.o... yes
checking if g++ -std=gnu++14 supports -c -o file.o... (cached) yes
checking whether the g++ -std=gnu++14 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... (cached) GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether the linker supports version scripts... yes
checking for ANSI C header files... (cached) yes
checking fcntl.h usability... yes
checking fcntl.h presence... yes
checking for fcntl.h... yes
checking for inttypes.h... (cached) yes
checking limits.h usability... yes
checking limits.h presence... yes
checking for limits.h... yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for working memcmp... yes
checking for working strtod... yes
checking for ftruncate... yes
checking for memset... yes
checking for mkdir... yes
checking for strchr... yes
checking for strerror... yes
checking for strtol... yes
checking zlib version... ok (1.2.0.4 or later)
checking for library containing zlibVersion... -lz
checking whether g++ -std=gnu++14 supports C++11 features by default... yes
checking whether -latomic is needed... no
checking whether gcc is Clang... no
checking whether pthreads work with -pthread... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking the location of hash_map... <unordered_map>
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating benchmarks/Makefile
config.status: creating conformance/Makefile
config.status: creating protobuf.pc
config.status: creating protobuf-lite.pc
config.status: creating config.h
config.status: executing depfiles commands
config.status: executing libtool commands
=== configuring in third_party/googletest (/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/third_party/googletest)
configure: WARNING: no configuration information is in third_party/googletest
Making install in .
make[1]: Entering directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0'
make[2]: Entering directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0'
make[2]: Nothing to be done for 'install-exec-am'.
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/pkgconfig'
 /usr/bin/install -c -m 644 protobuf.pc protobuf-lite.pc '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/pkgconfig'
make[2]: Leaving directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0'
make[1]: Leaving directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0'
Making install in src
make[1]: Entering directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/src'
depbase=`echo google/protobuf/compiler/main.o | sed 's|[^/]*$|.deps/&|;s|\.o$||'`;\
g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/main.o -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/main.o google/protobuf/compiler/main.cc &&\
mv -f $depbase.Tpo $depbase.Po
depbase=`echo google/protobuf/stubs/bytestream.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/bytestream.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/bytestream.lo google/protobuf/stubs/bytestream.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/bytestream.lo -MD -MP -MF google/protobuf/stubs/.deps/bytestream.Tpo -c google/protobuf/stubs/bytestream.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/bytestream.o
depbase=`echo google/protobuf/stubs/common.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/common.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/common.lo google/protobuf/stubs/common.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/common.lo -MD -MP -MF google/protobuf/stubs/.deps/common.Tpo -c google/protobuf/stubs/common.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/common.o
depbase=`echo google/protobuf/stubs/int128.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/int128.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/int128.lo google/protobuf/stubs/int128.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/int128.lo -MD -MP -MF google/protobuf/stubs/.deps/int128.Tpo -c google/protobuf/stubs/int128.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/int128.o
depbase=`echo google/protobuf/io/io_win32.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/io_win32.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/io_win32.lo google/protobuf/io/io_win32.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/io_win32.lo -MD -MP -MF google/protobuf/io/.deps/io_win32.Tpo -c google/protobuf/io/io_win32.cc  -fPIC -DPIC -o google/protobuf/io/.libs/io_win32.o
depbase=`echo google/protobuf/stubs/status.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/status.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/status.lo google/protobuf/stubs/status.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/status.lo -MD -MP -MF google/protobuf/stubs/.deps/status.Tpo -c google/protobuf/stubs/status.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/status.o
depbase=`echo google/protobuf/stubs/statusor.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/statusor.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/statusor.lo google/protobuf/stubs/statusor.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/statusor.lo -MD -MP -MF google/protobuf/stubs/.deps/statusor.Tpo -c google/protobuf/stubs/statusor.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/statusor.o
depbase=`echo google/protobuf/stubs/stringpiece.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/stringpiece.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/stringpiece.lo google/protobuf/stubs/stringpiece.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/stringpiece.lo -MD -MP -MF google/protobuf/stubs/.deps/stringpiece.Tpo -c google/protobuf/stubs/stringpiece.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/stringpiece.o
depbase=`echo google/protobuf/stubs/stringprintf.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/stringprintf.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/stringprintf.lo google/protobuf/stubs/stringprintf.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/stringprintf.lo -MD -MP -MF google/protobuf/stubs/.deps/stringprintf.Tpo -c google/protobuf/stubs/stringprintf.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/stringprintf.o
depbase=`echo google/protobuf/stubs/structurally_valid.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/structurally_valid.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/structurally_valid.lo google/protobuf/stubs/structurally_valid.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/structurally_valid.lo -MD -MP -MF google/protobuf/stubs/.deps/structurally_valid.Tpo -c google/protobuf/stubs/structurally_valid.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/structurally_valid.o
depbase=`echo google/protobuf/stubs/strutil.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/strutil.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/strutil.lo google/protobuf/stubs/strutil.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/strutil.lo -MD -MP -MF google/protobuf/stubs/.deps/strutil.Tpo -c google/protobuf/stubs/strutil.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/strutil.o
depbase=`echo google/protobuf/stubs/time.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/time.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/time.lo google/protobuf/stubs/time.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/time.lo -MD -MP -MF google/protobuf/stubs/.deps/time.Tpo -c google/protobuf/stubs/time.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/time.o
depbase=`echo google/protobuf/any_lite.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/any_lite.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/any_lite.lo google/protobuf/any_lite.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/any_lite.lo -MD -MP -MF google/protobuf/.deps/any_lite.Tpo -c google/protobuf/any_lite.cc  -fPIC -DPIC -o google/protobuf/.libs/any_lite.o
depbase=`echo google/protobuf/arena.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/arena.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/arena.lo google/protobuf/arena.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/arena.lo -MD -MP -MF google/protobuf/.deps/arena.Tpo -c google/protobuf/arena.cc  -fPIC -DPIC -o google/protobuf/.libs/arena.o
depbase=`echo google/protobuf/extension_set.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/extension_set.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/extension_set.lo google/protobuf/extension_set.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/extension_set.lo -MD -MP -MF google/protobuf/.deps/extension_set.Tpo -c google/protobuf/extension_set.cc  -fPIC -DPIC -o google/protobuf/.libs/extension_set.o
depbase=`echo google/protobuf/generated_message_util.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_util.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/generated_message_util.lo google/protobuf/generated_message_util.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_util.lo -MD -MP -MF google/protobuf/.deps/generated_message_util.Tpo -c google/protobuf/generated_message_util.cc  -fPIC -DPIC -o google/protobuf/.libs/generated_message_util.o
depbase=`echo google/protobuf/generated_message_table_driven_lite.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_table_driven_lite.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/generated_message_table_driven_lite.lo google/protobuf/generated_message_table_driven_lite.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_table_driven_lite.lo -MD -MP -MF google/protobuf/.deps/generated_message_table_driven_lite.Tpo -c google/protobuf/generated_message_table_driven_lite.cc  -fPIC -DPIC -o google/protobuf/.libs/generated_message_table_driven_lite.o
depbase=`echo google/protobuf/implicit_weak_message.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/implicit_weak_message.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/implicit_weak_message.lo google/protobuf/implicit_weak_message.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/implicit_weak_message.lo -MD -MP -MF google/protobuf/.deps/implicit_weak_message.Tpo -c google/protobuf/implicit_weak_message.cc  -fPIC -DPIC -o google/protobuf/.libs/implicit_weak_message.o
depbase=`echo google/protobuf/message_lite.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/message_lite.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/message_lite.lo google/protobuf/message_lite.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/message_lite.lo -MD -MP -MF google/protobuf/.deps/message_lite.Tpo -c google/protobuf/message_lite.cc  -fPIC -DPIC -o google/protobuf/.libs/message_lite.o
depbase=`echo google/protobuf/parse_context.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/parse_context.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/parse_context.lo google/protobuf/parse_context.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/parse_context.lo -MD -MP -MF google/protobuf/.deps/parse_context.Tpo -c google/protobuf/parse_context.cc  -fPIC -DPIC -o google/protobuf/.libs/parse_context.o
depbase=`echo google/protobuf/repeated_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/repeated_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/repeated_field.lo google/protobuf/repeated_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/repeated_field.lo -MD -MP -MF google/protobuf/.deps/repeated_field.Tpo -c google/protobuf/repeated_field.cc  -fPIC -DPIC -o google/protobuf/.libs/repeated_field.o
depbase=`echo google/protobuf/wire_format_lite.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/wire_format_lite.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/wire_format_lite.lo google/protobuf/wire_format_lite.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/wire_format_lite.lo -MD -MP -MF google/protobuf/.deps/wire_format_lite.Tpo -c google/protobuf/wire_format_lite.cc  -fPIC -DPIC -o google/protobuf/.libs/wire_format_lite.o
depbase=`echo google/protobuf/io/coded_stream.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/coded_stream.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/coded_stream.lo google/protobuf/io/coded_stream.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/coded_stream.lo -MD -MP -MF google/protobuf/io/.deps/coded_stream.Tpo -c google/protobuf/io/coded_stream.cc  -fPIC -DPIC -o google/protobuf/io/.libs/coded_stream.o
depbase=`echo google/protobuf/io/strtod.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/strtod.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/strtod.lo google/protobuf/io/strtod.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/strtod.lo -MD -MP -MF google/protobuf/io/.deps/strtod.Tpo -c google/protobuf/io/strtod.cc  -fPIC -DPIC -o google/protobuf/io/.libs/strtod.o
depbase=`echo google/protobuf/io/zero_copy_stream.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/zero_copy_stream.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/zero_copy_stream.lo google/protobuf/io/zero_copy_stream.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/zero_copy_stream.lo -MD -MP -MF google/protobuf/io/.deps/zero_copy_stream.Tpo -c google/protobuf/io/zero_copy_stream.cc  -fPIC -DPIC -o google/protobuf/io/.libs/zero_copy_stream.o
depbase=`echo google/protobuf/io/zero_copy_stream_impl_lite.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/zero_copy_stream_impl_lite.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/zero_copy_stream_impl_lite.lo google/protobuf/io/zero_copy_stream_impl_lite.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/zero_copy_stream_impl_lite.lo -MD -MP -MF google/protobuf/io/.deps/zero_copy_stream_impl_lite.Tpo -c google/protobuf/io/zero_copy_stream_impl_lite.cc  -fPIC -DPIC -o google/protobuf/io/.libs/zero_copy_stream_impl_lite.o
depbase=`echo google/protobuf/any.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/any.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/any.pb.lo google/protobuf/any.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/any.pb.lo -MD -MP -MF google/protobuf/.deps/any.pb.Tpo -c google/protobuf/any.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/any.pb.o
depbase=`echo google/protobuf/api.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/api.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/api.pb.lo google/protobuf/api.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/api.pb.lo -MD -MP -MF google/protobuf/.deps/api.pb.Tpo -c google/protobuf/api.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/api.pb.o
depbase=`echo google/protobuf/stubs/mathlimits.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/mathlimits.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/mathlimits.lo google/protobuf/stubs/mathlimits.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/mathlimits.lo -MD -MP -MF google/protobuf/stubs/.deps/mathlimits.Tpo -c google/protobuf/stubs/mathlimits.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/mathlimits.o
depbase=`echo google/protobuf/any.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/any.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/any.lo google/protobuf/any.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/any.lo -MD -MP -MF google/protobuf/.deps/any.Tpo -c google/protobuf/any.cc  -fPIC -DPIC -o google/protobuf/.libs/any.o
depbase=`echo google/protobuf/descriptor.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/descriptor.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/descriptor.lo google/protobuf/descriptor.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/descriptor.lo -MD -MP -MF google/protobuf/.deps/descriptor.Tpo -c google/protobuf/descriptor.cc  -fPIC -DPIC -o google/protobuf/.libs/descriptor.o
depbase=`echo google/protobuf/descriptor_database.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/descriptor_database.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/descriptor_database.lo google/protobuf/descriptor_database.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/descriptor_database.lo -MD -MP -MF google/protobuf/.deps/descriptor_database.Tpo -c google/protobuf/descriptor_database.cc  -fPIC -DPIC -o google/protobuf/.libs/descriptor_database.o
depbase=`echo google/protobuf/descriptor.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/descriptor.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/descriptor.pb.lo google/protobuf/descriptor.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/descriptor.pb.lo -MD -MP -MF google/protobuf/.deps/descriptor.pb.Tpo -c google/protobuf/descriptor.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/descriptor.pb.o
depbase=`echo google/protobuf/duration.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/duration.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/duration.pb.lo google/protobuf/duration.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/duration.pb.lo -MD -MP -MF google/protobuf/.deps/duration.pb.Tpo -c google/protobuf/duration.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/duration.pb.o
depbase=`echo google/protobuf/dynamic_message.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/dynamic_message.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/dynamic_message.lo google/protobuf/dynamic_message.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/dynamic_message.lo -MD -MP -MF google/protobuf/.deps/dynamic_message.Tpo -c google/protobuf/dynamic_message.cc  -fPIC -DPIC -o google/protobuf/.libs/dynamic_message.o
depbase=`echo google/protobuf/empty.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/empty.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/empty.pb.lo google/protobuf/empty.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/empty.pb.lo -MD -MP -MF google/protobuf/.deps/empty.pb.Tpo -c google/protobuf/empty.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/empty.pb.o
depbase=`echo google/protobuf/extension_set_heavy.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/extension_set_heavy.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/extension_set_heavy.lo google/protobuf/extension_set_heavy.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/extension_set_heavy.lo -MD -MP -MF google/protobuf/.deps/extension_set_heavy.Tpo -c google/protobuf/extension_set_heavy.cc  -fPIC -DPIC -o google/protobuf/.libs/extension_set_heavy.o
depbase=`echo google/protobuf/field_mask.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/field_mask.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/field_mask.pb.lo google/protobuf/field_mask.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/field_mask.pb.lo -MD -MP -MF google/protobuf/.deps/field_mask.pb.Tpo -c google/protobuf/field_mask.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/field_mask.pb.o
depbase=`echo google/protobuf/generated_message_reflection.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_reflection.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/generated_message_reflection.lo google/protobuf/generated_message_reflection.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_reflection.lo -MD -MP -MF google/protobuf/.deps/generated_message_reflection.Tpo -c google/protobuf/generated_message_reflection.cc  -fPIC -DPIC -o google/protobuf/.libs/generated_message_reflection.o
depbase=`echo google/protobuf/generated_message_table_driven.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_table_driven.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/generated_message_table_driven.lo google/protobuf/generated_message_table_driven.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/generated_message_table_driven.lo -MD -MP -MF google/protobuf/.deps/generated_message_table_driven.Tpo -c google/protobuf/generated_message_table_driven.cc  -fPIC -DPIC -o google/protobuf/.libs/generated_message_table_driven.o
depbase=`echo google/protobuf/map_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/map_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/map_field.lo google/protobuf/map_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/map_field.lo -MD -MP -MF google/protobuf/.deps/map_field.Tpo -c google/protobuf/map_field.cc  -fPIC -DPIC -o google/protobuf/.libs/map_field.o
depbase=`echo google/protobuf/message.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/message.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/message.lo google/protobuf/message.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/message.lo -MD -MP -MF google/protobuf/.deps/message.Tpo -c google/protobuf/message.cc  -fPIC -DPIC -o google/protobuf/.libs/message.o
depbase=`echo google/protobuf/reflection_ops.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/reflection_ops.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/reflection_ops.lo google/protobuf/reflection_ops.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/reflection_ops.lo -MD -MP -MF google/protobuf/.deps/reflection_ops.Tpo -c google/protobuf/reflection_ops.cc  -fPIC -DPIC -o google/protobuf/.libs/reflection_ops.o
depbase=`echo google/protobuf/service.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/service.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/service.lo google/protobuf/service.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/service.lo -MD -MP -MF google/protobuf/.deps/service.Tpo -c google/protobuf/service.cc  -fPIC -DPIC -o google/protobuf/.libs/service.o
depbase=`echo google/protobuf/source_context.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/source_context.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/source_context.pb.lo google/protobuf/source_context.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/source_context.pb.lo -MD -MP -MF google/protobuf/.deps/source_context.pb.Tpo -c google/protobuf/source_context.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/source_context.pb.o
depbase=`echo google/protobuf/struct.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/struct.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/struct.pb.lo google/protobuf/struct.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/struct.pb.lo -MD -MP -MF google/protobuf/.deps/struct.pb.Tpo -c google/protobuf/struct.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/struct.pb.o
depbase=`echo google/protobuf/stubs/substitute.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/substitute.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/stubs/substitute.lo google/protobuf/stubs/substitute.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/stubs/substitute.lo -MD -MP -MF google/protobuf/stubs/.deps/substitute.Tpo -c google/protobuf/stubs/substitute.cc  -fPIC -DPIC -o google/protobuf/stubs/.libs/substitute.o
depbase=`echo google/protobuf/text_format.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/text_format.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/text_format.lo google/protobuf/text_format.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/text_format.lo -MD -MP -MF google/protobuf/.deps/text_format.Tpo -c google/protobuf/text_format.cc  -fPIC -DPIC -o google/protobuf/.libs/text_format.o
depbase=`echo google/protobuf/timestamp.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/timestamp.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/timestamp.pb.lo google/protobuf/timestamp.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/timestamp.pb.lo -MD -MP -MF google/protobuf/.deps/timestamp.pb.Tpo -c google/protobuf/timestamp.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/timestamp.pb.o
depbase=`echo google/protobuf/type.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/type.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/type.pb.lo google/protobuf/type.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/type.pb.lo -MD -MP -MF google/protobuf/.deps/type.pb.Tpo -c google/protobuf/type.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/type.pb.o
depbase=`echo google/protobuf/unknown_field_set.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/unknown_field_set.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/unknown_field_set.lo google/protobuf/unknown_field_set.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/unknown_field_set.lo -MD -MP -MF google/protobuf/.deps/unknown_field_set.Tpo -c google/protobuf/unknown_field_set.cc  -fPIC -DPIC -o google/protobuf/.libs/unknown_field_set.o
depbase=`echo google/protobuf/wire_format.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/wire_format.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/wire_format.lo google/protobuf/wire_format.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/wire_format.lo -MD -MP -MF google/protobuf/.deps/wire_format.Tpo -c google/protobuf/wire_format.cc  -fPIC -DPIC -o google/protobuf/.libs/wire_format.o
depbase=`echo google/protobuf/wrappers.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/wrappers.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/wrappers.pb.lo google/protobuf/wrappers.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/wrappers.pb.lo -MD -MP -MF google/protobuf/.deps/wrappers.pb.Tpo -c google/protobuf/wrappers.pb.cc  -fPIC -DPIC -o google/protobuf/.libs/wrappers.pb.o
depbase=`echo google/protobuf/io/gzip_stream.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/gzip_stream.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/gzip_stream.lo google/protobuf/io/gzip_stream.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/gzip_stream.lo -MD -MP -MF google/protobuf/io/.deps/gzip_stream.Tpo -c google/protobuf/io/gzip_stream.cc  -fPIC -DPIC -o google/protobuf/io/.libs/gzip_stream.o
depbase=`echo google/protobuf/io/printer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/printer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/printer.lo google/protobuf/io/printer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/printer.lo -MD -MP -MF google/protobuf/io/.deps/printer.Tpo -c google/protobuf/io/printer.cc  -fPIC -DPIC -o google/protobuf/io/.libs/printer.o
depbase=`echo google/protobuf/io/tokenizer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/tokenizer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/tokenizer.lo google/protobuf/io/tokenizer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/tokenizer.lo -MD -MP -MF google/protobuf/io/.deps/tokenizer.Tpo -c google/protobuf/io/tokenizer.cc  -fPIC -DPIC -o google/protobuf/io/.libs/tokenizer.o
depbase=`echo google/protobuf/io/zero_copy_stream_impl.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/zero_copy_stream_impl.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/io/zero_copy_stream_impl.lo google/protobuf/io/zero_copy_stream_impl.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/io/zero_copy_stream_impl.lo -MD -MP -MF google/protobuf/io/.deps/zero_copy_stream_impl.Tpo -c google/protobuf/io/zero_copy_stream_impl.cc  -fPIC -DPIC -o google/protobuf/io/.libs/zero_copy_stream_impl.o
depbase=`echo google/protobuf/compiler/importer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/importer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/importer.lo google/protobuf/compiler/importer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/importer.lo -MD -MP -MF google/protobuf/compiler/.deps/importer.Tpo -c google/protobuf/compiler/importer.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/importer.o
depbase=`echo google/protobuf/compiler/parser.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/parser.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/parser.lo google/protobuf/compiler/parser.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/parser.lo -MD -MP -MF google/protobuf/compiler/.deps/parser.Tpo -c google/protobuf/compiler/parser.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/parser.o
depbase=`echo google/protobuf/util/delimited_message_util.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/delimited_message_util.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/delimited_message_util.lo google/protobuf/util/delimited_message_util.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/delimited_message_util.lo -MD -MP -MF google/protobuf/util/.deps/delimited_message_util.Tpo -c google/protobuf/util/delimited_message_util.cc  -fPIC -DPIC -o google/protobuf/util/.libs/delimited_message_util.o
depbase=`echo google/protobuf/util/field_comparator.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/field_comparator.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/field_comparator.lo google/protobuf/util/field_comparator.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/field_comparator.lo -MD -MP -MF google/protobuf/util/.deps/field_comparator.Tpo -c google/protobuf/util/field_comparator.cc  -fPIC -DPIC -o google/protobuf/util/.libs/field_comparator.o
depbase=`echo google/protobuf/util/field_mask_util.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/field_mask_util.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/field_mask_util.lo google/protobuf/util/field_mask_util.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/field_mask_util.lo -MD -MP -MF google/protobuf/util/.deps/field_mask_util.Tpo -c google/protobuf/util/field_mask_util.cc  -fPIC -DPIC -o google/protobuf/util/.libs/field_mask_util.o
depbase=`echo google/protobuf/util/internal/datapiece.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/datapiece.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/datapiece.lo google/protobuf/util/internal/datapiece.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/datapiece.lo -MD -MP -MF google/protobuf/util/internal/.deps/datapiece.Tpo -c google/protobuf/util/internal/datapiece.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/datapiece.o
depbase=`echo google/protobuf/util/internal/default_value_objectwriter.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/default_value_objectwriter.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/default_value_objectwriter.lo google/protobuf/util/internal/default_value_objectwriter.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/default_value_objectwriter.lo -MD -MP -MF google/protobuf/util/internal/.deps/default_value_objectwriter.Tpo -c google/protobuf/util/internal/default_value_objectwriter.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/default_value_objectwriter.o
depbase=`echo google/protobuf/util/internal/error_listener.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/error_listener.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/error_listener.lo google/protobuf/util/internal/error_listener.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/error_listener.lo -MD -MP -MF google/protobuf/util/internal/.deps/error_listener.Tpo -c google/protobuf/util/internal/error_listener.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/error_listener.o
depbase=`echo google/protobuf/util/internal/field_mask_utility.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/field_mask_utility.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/field_mask_utility.lo google/protobuf/util/internal/field_mask_utility.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/field_mask_utility.lo -MD -MP -MF google/protobuf/util/internal/.deps/field_mask_utility.Tpo -c google/protobuf/util/internal/field_mask_utility.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/field_mask_utility.o
depbase=`echo google/protobuf/util/internal/json_escaping.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/json_escaping.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/json_escaping.lo google/protobuf/util/internal/json_escaping.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/json_escaping.lo -MD -MP -MF google/protobuf/util/internal/.deps/json_escaping.Tpo -c google/protobuf/util/internal/json_escaping.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/json_escaping.o
depbase=`echo google/protobuf/util/internal/json_objectwriter.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/json_objectwriter.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/json_objectwriter.lo google/protobuf/util/internal/json_objectwriter.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/json_objectwriter.lo -MD -MP -MF google/protobuf/util/internal/.deps/json_objectwriter.Tpo -c google/protobuf/util/internal/json_objectwriter.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/json_objectwriter.o
depbase=`echo google/protobuf/util/internal/json_stream_parser.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/json_stream_parser.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/json_stream_parser.lo google/protobuf/util/internal/json_stream_parser.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/json_stream_parser.lo -MD -MP -MF google/protobuf/util/internal/.deps/json_stream_parser.Tpo -c google/protobuf/util/internal/json_stream_parser.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/json_stream_parser.o
depbase=`echo google/protobuf/util/internal/object_writer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/object_writer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/object_writer.lo google/protobuf/util/internal/object_writer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/object_writer.lo -MD -MP -MF google/protobuf/util/internal/.deps/object_writer.Tpo -c google/protobuf/util/internal/object_writer.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/object_writer.o
depbase=`echo google/protobuf/util/internal/protostream_objectsource.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/protostream_objectsource.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/protostream_objectsource.lo google/protobuf/util/internal/protostream_objectsource.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/protostream_objectsource.lo -MD -MP -MF google/protobuf/util/internal/.deps/protostream_objectsource.Tpo -c google/protobuf/util/internal/protostream_objectsource.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/protostream_objectsource.o
depbase=`echo google/protobuf/util/internal/protostream_objectwriter.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/protostream_objectwriter.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/protostream_objectwriter.lo google/protobuf/util/internal/protostream_objectwriter.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/protostream_objectwriter.lo -MD -MP -MF google/protobuf/util/internal/.deps/protostream_objectwriter.Tpo -c google/protobuf/util/internal/protostream_objectwriter.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/protostream_objectwriter.o
depbase=`echo google/protobuf/util/internal/proto_writer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/proto_writer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/proto_writer.lo google/protobuf/util/internal/proto_writer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/proto_writer.lo -MD -MP -MF google/protobuf/util/internal/.deps/proto_writer.Tpo -c google/protobuf/util/internal/proto_writer.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/proto_writer.o
depbase=`echo google/protobuf/util/internal/type_info.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/type_info.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/type_info.lo google/protobuf/util/internal/type_info.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/type_info.lo -MD -MP -MF google/protobuf/util/internal/.deps/type_info.Tpo -c google/protobuf/util/internal/type_info.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/type_info.o
depbase=`echo google/protobuf/util/internal/type_info_test_helper.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/type_info_test_helper.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/type_info_test_helper.lo google/protobuf/util/internal/type_info_test_helper.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/type_info_test_helper.lo -MD -MP -MF google/protobuf/util/internal/.deps/type_info_test_helper.Tpo -c google/protobuf/util/internal/type_info_test_helper.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/type_info_test_helper.o
depbase=`echo google/protobuf/util/internal/utility.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/utility.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/internal/utility.lo google/protobuf/util/internal/utility.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/internal/utility.lo -MD -MP -MF google/protobuf/util/internal/.deps/utility.Tpo -c google/protobuf/util/internal/utility.cc  -fPIC -DPIC -o google/protobuf/util/internal/.libs/utility.o
depbase=`echo google/protobuf/util/json_util.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/json_util.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/json_util.lo google/protobuf/util/json_util.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/json_util.lo -MD -MP -MF google/protobuf/util/.deps/json_util.Tpo -c google/protobuf/util/json_util.cc  -fPIC -DPIC -o google/protobuf/util/.libs/json_util.o
depbase=`echo google/protobuf/util/message_differencer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/message_differencer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/message_differencer.lo google/protobuf/util/message_differencer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/message_differencer.lo -MD -MP -MF google/protobuf/util/.deps/message_differencer.Tpo -c google/protobuf/util/message_differencer.cc  -fPIC -DPIC -o google/protobuf/util/.libs/message_differencer.o
depbase=`echo google/protobuf/util/time_util.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/time_util.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/time_util.lo google/protobuf/util/time_util.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/time_util.lo -MD -MP -MF google/protobuf/util/.deps/time_util.Tpo -c google/protobuf/util/time_util.cc  -fPIC -DPIC -o google/protobuf/util/.libs/time_util.o
depbase=`echo google/protobuf/util/type_resolver_util.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/type_resolver_util.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/util/type_resolver_util.lo google/protobuf/util/type_resolver_util.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/util/type_resolver_util.lo -MD -MP -MF google/protobuf/util/.deps/type_resolver_util.Tpo -c google/protobuf/util/type_resolver_util.cc  -fPIC -DPIC -o google/protobuf/util/.libs/type_resolver_util.o
/bin/bash ../libtool  --tag=CXX   --mode=link g++ -std=gnu++14 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -version-info 19:0:0 -export-dynamic -no-undefined -Wl,--version-script=./libprotobuf.map  -o libprotobuf.la -rpath /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib google/protobuf/stubs/bytestream.lo google/protobuf/stubs/common.lo google/protobuf/stubs/int128.lo google/protobuf/io/io_win32.lo google/protobuf/stubs/status.lo google/protobuf/stubs/statusor.lo google/protobuf/stubs/stringpiece.lo google/protobuf/stubs/stringprintf.lo google/protobuf/stubs/structurally_valid.lo google/protobuf/stubs/strutil.lo google/protobuf/stubs/time.lo google/protobuf/any_lite.lo google/protobuf/arena.lo google/protobuf/extension_set.lo google/protobuf/generated_message_util.lo google/protobuf/generated_message_table_driven_lite.lo google/protobuf/implicit_weak_message.lo google/protobuf/message_lite.lo google/protobuf/parse_context.lo google/protobuf/repeated_field.lo google/protobuf/wire_format_lite.lo google/protobuf/io/coded_stream.lo google/protobuf/io/strtod.lo google/protobuf/io/zero_copy_stream.lo google/protobuf/io/zero_copy_stream_impl_lite.lo google/protobuf/any.pb.lo google/protobuf/api.pb.lo google/protobuf/stubs/mathlimits.lo google/protobuf/any.lo google/protobuf/descriptor.lo google/protobuf/descriptor_database.lo google/protobuf/descriptor.pb.lo google/protobuf/duration.pb.lo google/protobuf/dynamic_message.lo google/protobuf/empty.pb.lo google/protobuf/extension_set_heavy.lo google/protobuf/field_mask.pb.lo google/protobuf/generated_message_reflection.lo google/protobuf/generated_message_table_driven.lo google/protobuf/map_field.lo google/protobuf/message.lo google/protobuf/reflection_ops.lo google/protobuf/service.lo google/protobuf/source_context.pb.lo google/protobuf/struct.pb.lo google/protobuf/stubs/substitute.lo google/protobuf/text_format.lo google/protobuf/timestamp.pb.lo google/protobuf/type.pb.lo google/protobuf/unknown_field_set.lo google/protobuf/wire_format.lo google/protobuf/wrappers.pb.lo google/protobuf/io/gzip_stream.lo google/protobuf/io/printer.lo google/protobuf/io/tokenizer.lo google/protobuf/io/zero_copy_stream_impl.lo google/protobuf/compiler/importer.lo google/protobuf/compiler/parser.lo google/protobuf/util/delimited_message_util.lo google/protobuf/util/field_comparator.lo google/protobuf/util/field_mask_util.lo google/protobuf/util/internal/datapiece.lo google/protobuf/util/internal/default_value_objectwriter.lo google/protobuf/util/internal/error_listener.lo google/protobuf/util/internal/field_mask_utility.lo google/protobuf/util/internal/json_escaping.lo google/protobuf/util/internal/json_objectwriter.lo google/protobuf/util/internal/json_stream_parser.lo google/protobuf/util/internal/object_writer.lo google/protobuf/util/internal/protostream_objectsource.lo google/protobuf/util/internal/protostream_objectwriter.lo google/protobuf/util/internal/proto_writer.lo google/protobuf/util/internal/type_info.lo google/protobuf/util/internal/type_info_test_helper.lo google/protobuf/util/internal/utility.lo google/protobuf/util/json_util.lo google/protobuf/util/message_differencer.lo google/protobuf/util/time_util.lo google/protobuf/util/type_resolver_util.lo    -lz 
libtool: link: g++ -std=gnu++14  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o  google/protobuf/stubs/.libs/bytestream.o google/protobuf/stubs/.libs/common.o google/protobuf/stubs/.libs/int128.o google/protobuf/io/.libs/io_win32.o google/protobuf/stubs/.libs/status.o google/protobuf/stubs/.libs/statusor.o google/protobuf/stubs/.libs/stringpiece.o google/protobuf/stubs/.libs/stringprintf.o google/protobuf/stubs/.libs/structurally_valid.o google/protobuf/stubs/.libs/strutil.o google/protobuf/stubs/.libs/time.o google/protobuf/.libs/any_lite.o google/protobuf/.libs/arena.o google/protobuf/.libs/extension_set.o google/protobuf/.libs/generated_message_util.o google/protobuf/.libs/generated_message_table_driven_lite.o google/protobuf/.libs/implicit_weak_message.o google/protobuf/.libs/message_lite.o google/protobuf/.libs/parse_context.o google/protobuf/.libs/repeated_field.o google/protobuf/.libs/wire_format_lite.o google/protobuf/io/.libs/coded_stream.o google/protobuf/io/.libs/strtod.o google/protobuf/io/.libs/zero_copy_stream.o google/protobuf/io/.libs/zero_copy_stream_impl_lite.o google/protobuf/.libs/any.pb.o google/protobuf/.libs/api.pb.o google/protobuf/stubs/.libs/mathlimits.o google/protobuf/.libs/any.o google/protobuf/.libs/descriptor.o google/protobuf/.libs/descriptor_database.o google/protobuf/.libs/descriptor.pb.o google/protobuf/.libs/duration.pb.o google/protobuf/.libs/dynamic_message.o google/protobuf/.libs/empty.pb.o google/protobuf/.libs/extension_set_heavy.o google/protobuf/.libs/field_mask.pb.o google/protobuf/.libs/generated_message_reflection.o google/protobuf/.libs/generated_message_table_driven.o google/protobuf/.libs/map_field.o google/protobuf/.libs/message.o google/protobuf/.libs/reflection_ops.o google/protobuf/.libs/service.o google/protobuf/.libs/source_context.pb.o google/protobuf/.libs/struct.pb.o google/protobuf/stubs/.libs/substitute.o google/protobuf/.libs/text_format.o google/protobuf/.libs/timestamp.pb.o google/protobuf/.libs/type.pb.o google/protobuf/.libs/unknown_field_set.o google/protobuf/.libs/wire_format.o google/protobuf/.libs/wrappers.pb.o google/protobuf/io/.libs/gzip_stream.o google/protobuf/io/.libs/printer.o google/protobuf/io/.libs/tokenizer.o google/protobuf/io/.libs/zero_copy_stream_impl.o google/protobuf/compiler/.libs/importer.o google/protobuf/compiler/.libs/parser.o google/protobuf/util/.libs/delimited_message_util.o google/protobuf/util/.libs/field_comparator.o google/protobuf/util/.libs/field_mask_util.o google/protobuf/util/internal/.libs/datapiece.o google/protobuf/util/internal/.libs/default_value_objectwriter.o google/protobuf/util/internal/.libs/error_listener.o google/protobuf/util/internal/.libs/field_mask_utility.o google/protobuf/util/internal/.libs/json_escaping.o google/protobuf/util/internal/.libs/json_objectwriter.o google/protobuf/util/internal/.libs/json_stream_parser.o google/protobuf/util/internal/.libs/object_writer.o google/protobuf/util/internal/.libs/protostream_objectsource.o google/protobuf/util/internal/.libs/protostream_objectwriter.o google/protobuf/util/internal/.libs/proto_writer.o google/protobuf/util/internal/.libs/type_info.o google/protobuf/util/internal/.libs/type_info_test_helper.o google/protobuf/util/internal/.libs/utility.o google/protobuf/util/.libs/json_util.o google/protobuf/util/.libs/message_differencer.o google/protobuf/util/.libs/time_util.o google/protobuf/util/.libs/type_resolver_util.o   -lz -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.o  -pthread -g -O2 -fstack-protector-strong -g -Wl,--version-script=./libprotobuf.map   -pthread -Wl,-soname -Wl,libprotobuf.so.19 -o .libs/libprotobuf.so.19.0.0
libtool: link: (cd ".libs" && rm -f "libprotobuf.so.19" && ln -s "libprotobuf.so.19.0.0" "libprotobuf.so.19")
libtool: link: (cd ".libs" && rm -f "libprotobuf.so" && ln -s "libprotobuf.so.19.0.0" "libprotobuf.so")
libtool: link: ( cd ".libs" && rm -f "libprotobuf.la" && ln -s "../libprotobuf.la" "libprotobuf.la" )
depbase=`echo google/protobuf/compiler/code_generator.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/code_generator.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/code_generator.lo google/protobuf/compiler/code_generator.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/code_generator.lo -MD -MP -MF google/protobuf/compiler/.deps/code_generator.Tpo -c google/protobuf/compiler/code_generator.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/code_generator.o
depbase=`echo google/protobuf/compiler/command_line_interface.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/command_line_interface.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/command_line_interface.lo google/protobuf/compiler/command_line_interface.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/command_line_interface.lo -MD -MP -MF google/protobuf/compiler/.deps/command_line_interface.Tpo -c google/protobuf/compiler/command_line_interface.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/command_line_interface.o
depbase=`echo google/protobuf/compiler/plugin.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/plugin.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/plugin.lo google/protobuf/compiler/plugin.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/plugin.lo -MD -MP -MF google/protobuf/compiler/.deps/plugin.Tpo -c google/protobuf/compiler/plugin.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/plugin.o
depbase=`echo google/protobuf/compiler/plugin.pb.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/plugin.pb.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/plugin.pb.lo google/protobuf/compiler/plugin.pb.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/plugin.pb.lo -MD -MP -MF google/protobuf/compiler/.deps/plugin.pb.Tpo -c google/protobuf/compiler/plugin.pb.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/plugin.pb.o
depbase=`echo google/protobuf/compiler/subprocess.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/subprocess.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/subprocess.lo google/protobuf/compiler/subprocess.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/subprocess.lo -MD -MP -MF google/protobuf/compiler/.deps/subprocess.Tpo -c google/protobuf/compiler/subprocess.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/subprocess.o
depbase=`echo google/protobuf/compiler/zip_writer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/zip_writer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/zip_writer.lo google/protobuf/compiler/zip_writer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/zip_writer.lo -MD -MP -MF google/protobuf/compiler/.deps/zip_writer.Tpo -c google/protobuf/compiler/zip_writer.cc  -fPIC -DPIC -o google/protobuf/compiler/.libs/zip_writer.o
depbase=`echo google/protobuf/compiler/cpp/cpp_enum.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_enum.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_enum.lo google/protobuf/compiler/cpp/cpp_enum.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_enum.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_enum.Tpo -c google/protobuf/compiler/cpp/cpp_enum.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_enum.o
depbase=`echo google/protobuf/compiler/cpp/cpp_enum_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_enum_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_enum_field.lo google/protobuf/compiler/cpp/cpp_enum_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_enum_field.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_enum_field.Tpo -c google/protobuf/compiler/cpp/cpp_enum_field.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_enum_field.o
depbase=`echo google/protobuf/compiler/cpp/cpp_extension.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_extension.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_extension.lo google/protobuf/compiler/cpp/cpp_extension.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_extension.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_extension.Tpo -c google/protobuf/compiler/cpp/cpp_extension.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_extension.o
depbase=`echo google/protobuf/compiler/cpp/cpp_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_field.lo google/protobuf/compiler/cpp/cpp_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_field.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_field.Tpo -c google/protobuf/compiler/cpp/cpp_field.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_field.o
depbase=`echo google/protobuf/compiler/cpp/cpp_file.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_file.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_file.lo google/protobuf/compiler/cpp/cpp_file.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_file.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_file.Tpo -c google/protobuf/compiler/cpp/cpp_file.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_file.o
depbase=`echo google/protobuf/compiler/cpp/cpp_generator.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_generator.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_generator.lo google/protobuf/compiler/cpp/cpp_generator.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_generator.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_generator.Tpo -c google/protobuf/compiler/cpp/cpp_generator.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_generator.o
depbase=`echo google/protobuf/compiler/cpp/cpp_helpers.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_helpers.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_helpers.lo google/protobuf/compiler/cpp/cpp_helpers.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_helpers.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_helpers.Tpo -c google/protobuf/compiler/cpp/cpp_helpers.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_helpers.o
depbase=`echo google/protobuf/compiler/cpp/cpp_map_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_map_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_map_field.lo google/protobuf/compiler/cpp/cpp_map_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_map_field.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_map_field.Tpo -c google/protobuf/compiler/cpp/cpp_map_field.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_map_field.o
depbase=`echo google/protobuf/compiler/cpp/cpp_message.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_message.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_message.lo google/protobuf/compiler/cpp/cpp_message.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_message.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_message.Tpo -c google/protobuf/compiler/cpp/cpp_message.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_message.o
depbase=`echo google/protobuf/compiler/cpp/cpp_message_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_message_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_message_field.lo google/protobuf/compiler/cpp/cpp_message_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_message_field.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_message_field.Tpo -c google/protobuf/compiler/cpp/cpp_message_field.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_message_field.o
depbase=`echo google/protobuf/compiler/cpp/cpp_padding_optimizer.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_padding_optimizer.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_padding_optimizer.lo google/protobuf/compiler/cpp/cpp_padding_optimizer.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_padding_optimizer.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_padding_optimizer.Tpo -c google/protobuf/compiler/cpp/cpp_padding_optimizer.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_padding_optimizer.o
depbase=`echo google/protobuf/compiler/cpp/cpp_primitive_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_primitive_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_primitive_field.lo google/protobuf/compiler/cpp/cpp_primitive_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_primitive_field.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_primitive_field.Tpo -c google/protobuf/compiler/cpp/cpp_primitive_field.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_primitive_field.o
depbase=`echo google/protobuf/compiler/cpp/cpp_service.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_service.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_service.lo google/protobuf/compiler/cpp/cpp_service.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_service.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_service.Tpo -c google/protobuf/compiler/cpp/cpp_service.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_service.o
depbase=`echo google/protobuf/compiler/cpp/cpp_string_field.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool  --tag=CXX   --mode=compile g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I..    -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_string_field.lo -MD -MP -MF $depbase.Tpo -c -o google/protobuf/compiler/cpp/cpp_string_field.lo google/protobuf/compiler/cpp/cpp_string_field.cc &&\
mv -f $depbase.Tpo $depbase.Plo
libtool: compile:  g++ -std=gnu++14 -DHAVE_CONFIG_H -I. -I.. -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -MT google/protobuf/compiler/cpp/cpp_string_field.lo -MD -MP -MF google/protobuf/compiler/cpp/.deps/cpp_string_field.Tpo -c google/protobuf/compiler/cpp/cpp_string_field.cc  -fPIC -DPIC -o google/protobuf/compiler/cpp/.libs/cpp_string_field.o
/bin/bash ../libtool  --tag=CXX   --mode=link g++ -std=gnu++14 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -version-info 19:0:0 -export-dynamic -no-undefined -Wl,--version-script=./libprotoc.map  -o libprotoc.la -rpath /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib google/protobuf/compiler/code_generator.lo google/protobuf/compiler/command_line_interface.lo google/protobuf/compiler/plugin.lo google/protobuf/compiler/plugin.pb.lo google/protobuf/compiler/subprocess.lo google/protobuf/compiler/zip_writer.lo google/protobuf/compiler/cpp/cpp_enum.lo google/protobuf/compiler/cpp/cpp_enum_field.lo google/protobuf/compiler/cpp/cpp_extension.lo google/protobuf/compiler/cpp/cpp_field.lo google/protobuf/compiler/cpp/cpp_file.lo google/protobuf/compiler/cpp/cpp_generator.lo google/protobuf/compiler/cpp/cpp_helpers.lo google/protobuf/compiler/cpp/cpp_map_field.lo google/protobuf/compiler/cpp/cpp_message.lo google/protobuf/compiler/cpp/cpp_message_field.lo google/protobuf/compiler/cpp/cpp_padding_optimizer.lo google/protobuf/compiler/cpp/cpp_primitive_field.lo google/protobuf/compiler/cpp/cpp_service.lo google/protobuf/compiler/cpp/cpp_string_field.lo  libprotobuf.la -lz 
libtool: link: g++ -std=gnu++14  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o  google/protobuf/compiler/.libs/code_generator.o google/protobuf/compiler/.libs/command_line_interface.o google/protobuf/compiler/.libs/plugin.o google/protobuf/compiler/.libs/plugin.pb.o google/protobuf/compiler/.libs/subprocess.o google/protobuf/compiler/.libs/zip_writer.o google/protobuf/compiler/cpp/.libs/cpp_enum.o google/protobuf/compiler/cpp/.libs/cpp_enum_field.o google/protobuf/compiler/cpp/.libs/cpp_extension.o google/protobuf/compiler/cpp/.libs/cpp_field.o google/protobuf/compiler/cpp/.libs/cpp_file.o google/protobuf/compiler/cpp/.libs/cpp_generator.o google/protobuf/compiler/cpp/.libs/cpp_helpers.o google/protobuf/compiler/cpp/.libs/cpp_map_field.o google/protobuf/compiler/cpp/.libs/cpp_message.o google/protobuf/compiler/cpp/.libs/cpp_message_field.o google/protobuf/compiler/cpp/.libs/cpp_padding_optimizer.o google/protobuf/compiler/cpp/.libs/cpp_primitive_field.o google/protobuf/compiler/cpp/.libs/cpp_service.o google/protobuf/compiler/cpp/.libs/cpp_string_field.o   -Wl,-rpath -Wl,/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/src/.libs -Wl,-rpath -Wl,/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib ./.libs/libprotobuf.so -lz -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.o  -pthread -g -O2 -fstack-protector-strong -g -Wl,--version-script=./libprotoc.map   -pthread -Wl,-soname -Wl,libprotoc.so.19 -o .libs/libprotoc.so.19.0.0
libtool: link: (cd ".libs" && rm -f "libprotoc.so.19" && ln -s "libprotoc.so.19.0.0" "libprotoc.so.19")
libtool: link: (cd ".libs" && rm -f "libprotoc.so" && ln -s "libprotoc.so.19.0.0" "libprotoc.so")
libtool: link: ( cd ".libs" && rm -f "libprotoc.la" && ln -s "../libprotoc.la" "libprotoc.la" )
/bin/bash ../libtool  --tag=CXX   --mode=link g++ -std=gnu++14 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -pthread  -o protoc google/protobuf/compiler/main.o  libprotobuf.la libprotoc.la -lz 
libtool: link: g++ -std=gnu++14 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -pthread -o .libs/protoc google/protobuf/compiler/main.o  ./.libs/libprotobuf.so ./.libs/libprotoc.so -lz -pthread -Wl,-rpath -Wl,/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib
/bin/bash ../libtool  --tag=CXX   --mode=link g++ -std=gnu++14 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -version-info 19:0:0 -export-dynamic -no-undefined -Wl,--version-script=./libprotobuf-lite.map  -o libprotobuf-lite.la -rpath /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib google/protobuf/stubs/bytestream.lo google/protobuf/stubs/common.lo google/protobuf/stubs/int128.lo google/protobuf/io/io_win32.lo google/protobuf/stubs/status.lo google/protobuf/stubs/statusor.lo google/protobuf/stubs/stringpiece.lo google/protobuf/stubs/stringprintf.lo google/protobuf/stubs/structurally_valid.lo google/protobuf/stubs/strutil.lo google/protobuf/stubs/time.lo google/protobuf/any_lite.lo google/protobuf/arena.lo google/protobuf/extension_set.lo google/protobuf/generated_message_util.lo google/protobuf/generated_message_table_driven_lite.lo google/protobuf/implicit_weak_message.lo google/protobuf/message_lite.lo google/protobuf/parse_context.lo google/protobuf/repeated_field.lo google/protobuf/wire_format_lite.lo google/protobuf/io/coded_stream.lo google/protobuf/io/strtod.lo google/protobuf/io/zero_copy_stream.lo google/protobuf/io/zero_copy_stream_impl_lite.lo   -lz 
libtool: link: g++ -std=gnu++14  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o  google/protobuf/stubs/.libs/bytestream.o google/protobuf/stubs/.libs/common.o google/protobuf/stubs/.libs/int128.o google/protobuf/io/.libs/io_win32.o google/protobuf/stubs/.libs/status.o google/protobuf/stubs/.libs/statusor.o google/protobuf/stubs/.libs/stringpiece.o google/protobuf/stubs/.libs/stringprintf.o google/protobuf/stubs/.libs/structurally_valid.o google/protobuf/stubs/.libs/strutil.o google/protobuf/stubs/.libs/time.o google/protobuf/.libs/any_lite.o google/protobuf/.libs/arena.o google/protobuf/.libs/extension_set.o google/protobuf/.libs/generated_message_util.o google/protobuf/.libs/generated_message_table_driven_lite.o google/protobuf/.libs/implicit_weak_message.o google/protobuf/.libs/message_lite.o google/protobuf/.libs/parse_context.o google/protobuf/.libs/repeated_field.o google/protobuf/.libs/wire_format_lite.o google/protobuf/io/.libs/coded_stream.o google/protobuf/io/.libs/strtod.o google/protobuf/io/.libs/zero_copy_stream.o google/protobuf/io/.libs/zero_copy_stream_impl_lite.o   -lz -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.o  -pthread -g -O2 -fstack-protector-strong -g -Wl,--version-script=./libprotobuf-lite.map   -pthread -Wl,-soname -Wl,libprotobuf-lite.so.19 -o .libs/libprotobuf-lite.so.19.0.0
libtool: link: (cd ".libs" && rm -f "libprotobuf-lite.so.19" && ln -s "libprotobuf-lite.so.19.0.0" "libprotobuf-lite.so.19")
libtool: link: (cd ".libs" && rm -f "libprotobuf-lite.so" && ln -s "libprotobuf-lite.so.19.0.0" "libprotobuf-lite.so")
libtool: link: ( cd ".libs" && rm -f "libprotobuf-lite.la" && ln -s "../libprotobuf-lite.la" "libprotobuf-lite.la" )
make[2]: Entering directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/src'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib'
 /bin/bash ../libtool   --mode=install /usr/bin/install -c   libprotobuf-lite.la libprotobuf.la libprotoc.la '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib'
libtool: install: /usr/bin/install -c .libs/libprotobuf-lite.so.19.0.0 /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotobuf-lite.so.19.0.0
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib && { ln -s -f libprotobuf-lite.so.19.0.0 libprotobuf-lite.so.19 || { rm -f libprotobuf-lite.so.19 && ln -s libprotobuf-lite.so.19.0.0 libprotobuf-lite.so.19; }; })
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib && { ln -s -f libprotobuf-lite.so.19.0.0 libprotobuf-lite.so || { rm -f libprotobuf-lite.so && ln -s libprotobuf-lite.so.19.0.0 libprotobuf-lite.so; }; })
libtool: install: /usr/bin/install -c .libs/libprotobuf-lite.lai /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotobuf-lite.la
libtool: install: /usr/bin/install -c .libs/libprotobuf.so.19.0.0 /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotobuf.so.19.0.0
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib && { ln -s -f libprotobuf.so.19.0.0 libprotobuf.so.19 || { rm -f libprotobuf.so.19 && ln -s libprotobuf.so.19.0.0 libprotobuf.so.19; }; })
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib && { ln -s -f libprotobuf.so.19.0.0 libprotobuf.so || { rm -f libprotobuf.so && ln -s libprotobuf.so.19.0.0 libprotobuf.so; }; })
libtool: install: /usr/bin/install -c .libs/libprotobuf.lai /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotobuf.la
libtool: warning: relinking 'libprotoc.la'
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/src; /bin/bash "/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/libtool"  --tag CXX --mode=relink g++ -std=gnu++14 -pthread -DHAVE_PTHREAD=1 -DHAVE_ZLIB=1 -Wall -Wno-sign-compare -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g -version-info 19:0:0 -export-dynamic -no-undefined -Wl,--version-script=./libprotoc.map -o libprotoc.la -rpath /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib google/protobuf/compiler/code_generator.lo google/protobuf/compiler/command_line_interface.lo google/protobuf/compiler/plugin.lo google/protobuf/compiler/plugin.pb.lo google/protobuf/compiler/subprocess.lo google/protobuf/compiler/zip_writer.lo google/protobuf/compiler/cpp/cpp_enum.lo google/protobuf/compiler/cpp/cpp_enum_field.lo google/protobuf/compiler/cpp/cpp_extension.lo google/protobuf/compiler/cpp/cpp_field.lo google/protobuf/compiler/cpp/cpp_file.lo google/protobuf/compiler/cpp/cpp_generator.lo google/protobuf/compiler/cpp/cpp_helpers.lo google/protobuf/compiler/cpp/cpp_map_field.lo google/protobuf/compiler/cpp/cpp_message.lo google/protobuf/compiler/cpp/cpp_message_field.lo google/protobuf/compiler/cpp/cpp_padding_optimizer.lo google/protobuf/compiler/cpp/cpp_primitive_field.lo google/protobuf/compiler/cpp/cpp_service.lo google/protobuf/compiler/cpp/cpp_string_field.lo libprotobuf.la -lz )
libtool: relink: g++ -std=gnu++14  -fPIC -DPIC -shared -nostdlib /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o  google/protobuf/compiler/.libs/code_generator.o google/protobuf/compiler/.libs/command_line_interface.o google/protobuf/compiler/.libs/plugin.o google/protobuf/compiler/.libs/plugin.pb.o google/protobuf/compiler/.libs/subprocess.o google/protobuf/compiler/.libs/zip_writer.o google/protobuf/compiler/cpp/.libs/cpp_enum.o google/protobuf/compiler/cpp/.libs/cpp_enum_field.o google/protobuf/compiler/cpp/.libs/cpp_extension.o google/protobuf/compiler/cpp/.libs/cpp_field.o google/protobuf/compiler/cpp/.libs/cpp_file.o google/protobuf/compiler/cpp/.libs/cpp_generator.o google/protobuf/compiler/cpp/.libs/cpp_helpers.o google/protobuf/compiler/cpp/.libs/cpp_map_field.o google/protobuf/compiler/cpp/.libs/cpp_message.o google/protobuf/compiler/cpp/.libs/cpp_message_field.o google/protobuf/compiler/cpp/.libs/cpp_padding_optimizer.o google/protobuf/compiler/cpp/.libs/cpp_primitive_field.o google/protobuf/compiler/cpp/.libs/cpp_service.o google/protobuf/compiler/cpp/.libs/cpp_string_field.o   -Wl,-rpath -Wl,/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib -L/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib -lprotobuf -lz -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. -lstdc++ -lm -lc -lgcc_s /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.o  -pthread -g -O2 -fstack-protector-strong -g -Wl,--version-script=./libprotoc.map   -pthread -Wl,-soname -Wl,libprotoc.so.19 -o .libs/libprotoc.so.19.0.0
libtool: install: /usr/bin/install -c .libs/libprotoc.so.19.0.0T /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotoc.so.19.0.0
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib && { ln -s -f libprotoc.so.19.0.0 libprotoc.so.19 || { rm -f libprotoc.so.19 && ln -s libprotoc.so.19.0.0 libprotoc.so.19; }; })
libtool: install: (cd /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib && { ln -s -f libprotoc.so.19.0.0 libprotoc.so || { rm -f libprotoc.so && ln -s libprotoc.so.19.0.0 libprotoc.so; }; })
libtool: install: /usr/bin/install -c .libs/libprotoc.lai /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotoc.la
libtool: finish: PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/sbin" ldconfig -n /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/bin'
  /bin/bash ../libtool   --mode=install /usr/bin/install -c protoc '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/bin'
libtool: install: /usr/bin/install -c .libs/protoc /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/bin/protoc
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/compiler'
 /usr/bin/install -c -m 644  google/protobuf/compiler/plugin.proto '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/compiler'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf'
 /usr/bin/install -c -m 644  google/protobuf/descriptor.proto google/protobuf/any.proto google/protobuf/api.proto google/protobuf/duration.proto google/protobuf/empty.proto google/protobuf/field_mask.proto google/protobuf/source_context.proto google/protobuf/struct.proto google/protobuf/timestamp.proto google/protobuf/type.proto google/protobuf/wrappers.proto '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf'
 /usr/bin/install -c -m 644  google/protobuf/any.pb.h google/protobuf/api.pb.h google/protobuf/any.h google/protobuf/arena.h google/protobuf/arena_impl.h google/protobuf/arenastring.h google/protobuf/descriptor_database.h google/protobuf/descriptor.h google/protobuf/descriptor.pb.h google/protobuf/duration.pb.h google/protobuf/dynamic_message.h google/protobuf/empty.pb.h google/protobuf/extension_set.h google/protobuf/extension_set_inl.h google/protobuf/field_mask.pb.h google/protobuf/generated_enum_reflection.h google/protobuf/generated_enum_util.h google/protobuf/generated_message_reflection.h google/protobuf/generated_message_table_driven.h google/protobuf/generated_message_util.h google/protobuf/has_bits.h google/protobuf/implicit_weak_message.h google/protobuf/inlined_string_field.h google/protobuf/map_entry.h google/protobuf/map_entry_lite.h google/protobuf/map_field.h google/protobuf/map_field_inl.h google/protobuf/map_field_lite.h google/protobuf/map.h google/protobuf/map_type_handler.h google/protobuf/message.h google/protobuf/message_lite.h google/protobuf/metadata.h google/protobuf/metadata_lite.h google/protobuf/parse_context.h google/protobuf/port.h google/protobuf/port_def.inc google/protobuf/port_undef.inc google/protobuf/reflection.h google/protobuf/reflection_ops.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/compiler'
 /usr/bin/install -c -m 644  google/protobuf/compiler/code_generator.h google/protobuf/compiler/command_line_interface.h google/protobuf/compiler/importer.h google/protobuf/compiler/parser.h google/protobuf/compiler/plugin.h google/protobuf/compiler/plugin.pb.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/compiler'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/compiler/cpp'
 /usr/bin/install -c -m 644  google/protobuf/compiler/cpp/cpp_generator.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/compiler/cpp'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/util'
 /usr/bin/install -c -m 644  google/protobuf/util/type_resolver.h google/protobuf/util/delimited_message_util.h google/protobuf/util/field_comparator.h google/protobuf/util/field_mask_util.h google/protobuf/util/json_util.h google/protobuf/util/time_util.h google/protobuf/util/type_resolver_util.h google/protobuf/util/message_differencer.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/util'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/stubs'
 /usr/bin/install -c -m 644  google/protobuf/stubs/callback.h google/protobuf/stubs/bytestream.h google/protobuf/stubs/casts.h google/protobuf/stubs/common.h google/protobuf/stubs/fastmem.h google/protobuf/stubs/hash.h google/protobuf/stubs/logging.h google/protobuf/stubs/macros.h google/protobuf/stubs/mutex.h google/protobuf/stubs/once.h google/protobuf/stubs/platform_macros.h google/protobuf/stubs/port.h google/protobuf/stubs/status.h google/protobuf/stubs/stl_util.h google/protobuf/stubs/stringpiece.h google/protobuf/stubs/strutil.h google/protobuf/stubs/template_util.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/stubs'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf'
 /usr/bin/install -c -m 644  google/protobuf/repeated_field.h google/protobuf/service.h google/protobuf/source_context.pb.h google/protobuf/struct.pb.h google/protobuf/text_format.h google/protobuf/timestamp.pb.h google/protobuf/type.pb.h google/protobuf/unknown_field_set.h google/protobuf/wire_format.h google/protobuf/wire_format_lite.h google/protobuf/wrappers.pb.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf'
 /usr/bin/mkdir -p '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/io'
 /usr/bin/install -c -m 644  google/protobuf/io/coded_stream.h google/protobuf/io/gzip_stream.h google/protobuf/io/printer.h google/protobuf/io/strtod.h google/protobuf/io/tokenizer.h google/protobuf/io/zero_copy_stream.h google/protobuf/io/zero_copy_stream_impl.h google/protobuf/io/zero_copy_stream_impl_lite.h '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google/protobuf/io'
make[2]: Leaving directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/src'
make[1]: Leaving directory '/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/protobuf-3.8.0/src'
configure: creating ./config.status
config.status: creating src/Makevars
** libs
g++ -std=gnu++11 -shared -fpic -I../inst/include/ -I/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/ -o GatingSet_pb_lib/libGatingSet.pb.so GatingSet_pb_lib/GatingSet.pb.cc
mkdir -p "/tmp/built/00LOCK-RProtoBufLib/00new/RProtoBufLib/include"
cp -r /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/google /tmp/built/00LOCK-RProtoBufLib/00new/RProtoBufLib/include
mkdir -p "/tmp/built/00LOCK-RProtoBufLib/00new/RProtoBufLib/lib/"
cp /tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/lib/libprotobuf* /tmp/built/00LOCK-RProtoBufLib/00new/RProtoBufLib/lib/
cp GatingSet_pb_lib/libGatingSet.pb.so /tmp/built/00LOCK-RProtoBufLib/00new/RProtoBufLib/lib//libGatingSet.pb.so
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I/tmp/RtmpbRZbGR/R.INSTALL3f6d506aaefe/RProtoBufLib/src/pb_build/include/  -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c dummy.cpp -o dummy.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o RProtoBufLib.so dummy.o -L/usr/local/lib/R/lib -lR
installing to /tmp/built/00LOCK-RProtoBufLib/00new/RProtoBufLib/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘RProtoBufLib’ as ‘RProtoBufLib_2.10.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RProtoBufLib)
* installing *binary* package ‘RColorBrewer’ ...
* ‘RColorBrewer’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RColorBrewer’ as ‘RColorBrewer_1.1-3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RColorBrewer)
* installing *binary* package ‘hexbin’ ...
* ‘hexbin’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘hexbin’ as ‘hexbin_1.28.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (hexbin)
* installing *binary* package ‘IDPmisc’ ...
* ‘IDPmisc’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘IDPmisc’ as ‘IDPmisc_1.1.20_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (IDPmisc)
* installing *source* package ‘BiocGenerics’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
Creating a new generic function for ‘aperm’ in package ‘BiocGenerics’
Creating a new generic function for ‘append’ in package ‘BiocGenerics’
Creating a new generic function for ‘as.data.frame’ in package ‘BiocGenerics’
Creating a new generic function for ‘cbind’ in package ‘BiocGenerics’
Creating a new generic function for ‘rbind’ in package ‘BiocGenerics’
Creating a new generic function for ‘do.call’ in package ‘BiocGenerics’
Creating a new generic function for ‘duplicated’ in package ‘BiocGenerics’
Creating a new generic function for ‘anyDuplicated’ in package ‘BiocGenerics’
Creating a new generic function for ‘eval’ in package ‘BiocGenerics’
Creating a new generic function for ‘pmax’ in package ‘BiocGenerics’
Creating a new generic function for ‘pmin’ in package ‘BiocGenerics’
Creating a new generic function for ‘pmax.int’ in package ‘BiocGenerics’
Creating a new generic function for ‘pmin.int’ in package ‘BiocGenerics’
Creating a new generic function for ‘Reduce’ in package ‘BiocGenerics’
Creating a new generic function for ‘Filter’ in package ‘BiocGenerics’
Creating a new generic function for ‘Find’ in package ‘BiocGenerics’
Creating a new generic function for ‘Map’ in package ‘BiocGenerics’
Creating a new generic function for ‘Position’ in package ‘BiocGenerics’
Creating a new generic function for ‘get’ in package ‘BiocGenerics’
Creating a new generic function for ‘mget’ in package ‘BiocGenerics’
Creating a new generic function for ‘grep’ in package ‘BiocGenerics’
Creating a new generic function for ‘grepl’ in package ‘BiocGenerics’
Creating a new generic function for ‘is.unsorted’ in package ‘BiocGenerics’
Creating a new generic function for ‘lapply’ in package ‘BiocGenerics’
Creating a new generic function for ‘sapply’ in package ‘BiocGenerics’
Creating a new generic function for ‘mapply’ in package ‘BiocGenerics’
Creating a new generic function for ‘match’ in package ‘BiocGenerics’
Creating a new generic function for ‘order’ in package ‘BiocGenerics’
Creating a new generic function for ‘paste’ in package ‘BiocGenerics’
Creating a new generic function for ‘rank’ in package ‘BiocGenerics’
Creating a new generic function for ‘rownames’ in package ‘BiocGenerics’
Creating a new generic function for ‘colnames’ in package ‘BiocGenerics’
Creating a new generic function for ‘union’ in package ‘BiocGenerics’
Creating a new generic function for ‘intersect’ in package ‘BiocGenerics’
Creating a new generic function for ‘setdiff’ in package ‘BiocGenerics’
Creating a new generic function for ‘sort’ in package ‘BiocGenerics’
Creating a new generic function for ‘table’ in package ‘BiocGenerics’
Creating a new generic function for ‘tapply’ in package ‘BiocGenerics’
Creating a new generic function for ‘unique’ in package ‘BiocGenerics’
Creating a new generic function for ‘unsplit’ in package ‘BiocGenerics’
Creating a new generic function for ‘var’ in package ‘BiocGenerics’
Creating a new generic function for ‘sd’ in package ‘BiocGenerics’
Creating a new generic function for ‘which.min’ in package ‘BiocGenerics’
Creating a new generic function for ‘which.max’ in package ‘BiocGenerics’
Creating a new generic function for ‘IQR’ in package ‘BiocGenerics’
Creating a new generic function for ‘mad’ in package ‘BiocGenerics’
Creating a new generic function for ‘xtabs’ in package ‘BiocGenerics’
Creating a new generic function for ‘basename’ in package ‘BiocGenerics’
Creating a new generic function for ‘dirname’ in package ‘BiocGenerics’
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocGenerics’ as ‘BiocGenerics_0.44.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocGenerics)
* installing *binary* package ‘interp’ ...
* ‘interp’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘interp’ as ‘interp_1.1-3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (interp)
* installing *source* package ‘cytolib’ ...
** using staged installation
checking for a sed that does not truncate output... /usr/bin/sed
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking how to run the C++ preprocessor... g++ -E
checking whether we are using the GNU C++ compiler... (cached) yes
checking whether g++ accepts -g... (cached) yes
configure: Parsing cytolib version info ...
configure: CYTOLIB_VERSION=2.10.1
configure: creating ./config.status
config.status: creating inst/include/cytolib/cytolibConfig.h
config.status: creating src/Makevars
** libs
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c dummy.cpp -o dummy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/system/src/error_code.cpp -o boost/libs/system/src/error_code.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/codecvt_error_category.cpp -o boost/libs/filesystem/src/codecvt_error_category.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/directory.cpp -o boost/libs/filesystem/src/directory.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/exception.cpp -o boost/libs/filesystem/src/exception.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/operations.cpp -o boost/libs/filesystem/src/operations.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/path.cpp -o boost/libs/filesystem/src/path.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/path_traits.cpp -o boost/libs/filesystem/src/path_traits.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/portability.cpp -o boost/libs/filesystem/src/portability.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/unique_path.cpp -o boost/libs/filesystem/src/unique_path.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/utf8_codecvt_facet.cpp -o boost/libs/filesystem/src/utf8_codecvt_facet.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c boost/libs/filesystem/src/windows_file_codecvt.cpp -o boost/libs/filesystem/src/windows_file_codecvt.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c CytoFrame.cpp -o CytoFrame.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c CytoFrameView.cpp -o CytoFrameView.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/CytoFrameView.hpp:12,
                 from CytoFrameView.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c CytoVFS.cpp -o CytoVFS.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c GatingHierarchy.cpp -o GatingHierarchy.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:130:9:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/topological_sort.hpp:16,
                 from GatingHierarchy.cpp:7:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:39:10: note: in a call to non-static member function ‘void boost::DFSVisitorConcept<Visitor, Graph>::constraints() [with Visitor = cytolib::phylo_visitor; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
   39 |     void constraints()
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<cytolib::phylo_visitor> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<cytolib::phylo_visitor>’
/tmp/built/BH/include/boost/concept_check.hpp:165:3:   required from ‘struct boost::CopyConstructibleConcept<cytolib::phylo_visitor>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::CopyConstructibleConcept<cytolib::phylo_visitor>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::CopyConstructibleConcept<cytolib::phylo_visitor> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::CopyConstructibleConcept<cytolib::phylo_visitor> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:130:9:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<cytolib::phylo_visitor>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::CopyConstructibleConcept<cytolib::phylo_visitor>]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:41:9:   required from ‘void boost::DFSVisitorConcept<Visitor, Graph>::constraints() [with Visitor = cytolib::phylo_visitor; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:130:9:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:165:17: note: in a call to non-static member function ‘boost::CopyConstructibleConcept<cytolib::phylo_visitor>::~CopyConstructibleConcept()’
  165 |   BOOST_concept(CopyConstructible,(TT))
      |                 ^~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:165:3: note: in expansion of macro ‘BOOST_concept’
  165 |   BOOST_concept(CopyConstructible,(TT))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:66:5:   required from ‘struct boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:87:5:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:15: note: in a call to non-static member function ‘boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >::~IncidenceGraphConcept()’
   75 | BOOST_concept(IncidenceGraph, (G)) : Graph< G >
      |               ^~~~~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1: note: in expansion of macro ‘BOOST_concept’
   75 | BOOST_concept(IncidenceGraph, (G)) : Graph< G >
      | ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:205:10: note: in a call to non-static member function ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  205 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::default_color_type> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValue<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValueConcept<boost::default_color_type>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::ColorValueConcept<boost::default_color_type>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::default_color_type>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<boost::default_color_type> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValue<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValueConcept<boost::default_color_type>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::ColorValueConcept<boost::default_color_type>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<boost::default_color_type>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::ColorValue<boost::default_color_type> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:505:5:   required from ‘struct boost::concepts::ColorValue<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValueConcept<boost::default_color_type>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::ColorValueConcept<boost::default_color_type>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::ColorValue<boost::default_color_type>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:15: note: in a call to non-static member function ‘boost::concepts::ColorValueConcept<boost::default_color_type>::~ColorValueConcept()’
  502 | BOOST_concept(ColorValue, (C))
      |               ^~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1: note: in expansion of macro ‘BOOST_concept’
  502 | BOOST_concept(ColorValue, (C))
      | ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::EdgeListGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:233:5:   required from ‘struct boost::concepts::EdgeListGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘struct boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::EdgeListGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:15: note: in a call to non-static member function ‘boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >::~EdgeListGraphConcept()’
  226 | BOOST_concept(EdgeListGraph, (G)) : Graph< G >
      |               ^~~~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1: note: in expansion of macro ‘BOOST_concept’
  226 | BOOST_concept(EdgeListGraph, (G)) : Graph< G >
      | ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<cytolib::phylo_visitor>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<cytolib::phylo_visitor> >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<cytolib::phylo_visitor>’
/tmp/built/BH/include/boost/concept_check.hpp:165:3:   required from ‘struct boost::CopyConstructibleConcept<cytolib::phylo_visitor>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::CopyConstructibleConcept<cytolib::phylo_visitor>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::CopyConstructibleConcept<cytolib::phylo_visitor> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::DFSVisitorConcept<cytolib::phylo_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:130:9:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = cytolib::phylo_visitor]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:66:5:   required from ‘struct boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::Graph<G>::~Graph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:66:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   66 |     BOOST_CONCEPT_USAGE(Graph)
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:87:5:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:87:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   87 |     BOOST_CONCEPT_USAGE(IncidenceGraph)
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::ReadablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:206:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:147:10: note: in a call to non-static member function ‘void boost::ReadablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  147 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::WritablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:207:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:179:10: note: in a call to non-static member function ‘void boost::WritablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  179 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::lvalue_property_map_tag, boost::read_write_property_map_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:208:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:206:17: note: in a call to non-static member function ‘boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>::~ConvertibleConcept()’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |                 ^~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:206:3: note: in expansion of macro ‘BOOST_concept’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::default_color_type>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::default_color_type> >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValue<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValueConcept<boost::default_color_type>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::ColorValueConcept<boost::default_color_type>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::default_color_type]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<boost::default_color_type>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<boost::default_color_type> >]’
/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValue<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValueConcept<boost::default_color_type>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::ColorValueConcept<boost::default_color_type>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = boost::default_color_type]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::ColorValue<boost::default_color_type>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::ColorValue<boost::default_color_type> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:505:5:   required from ‘struct boost::concepts::ColorValue<boost::default_color_type>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:502:1:   required from ‘struct boost::concepts::ColorValueConcept<boost::default_color_type>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::ColorValueConcept<boost::default_color_type>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::ColorValueConcept<boost::default_color_type> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::ColorValueConcept<boost::default_color_type>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:136:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::ColorValue<C>::~ColorValue() [with C = boost::default_color_type]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:505:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  505 |     BOOST_CONCEPT_USAGE(ColorValue)
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::EdgeListGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::EdgeListGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:233:5:   required from ‘struct boost::concepts::EdgeListGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘struct boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EdgeListGraph)
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50:   required from ‘struct boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   52 |     BOOST_concept(MultiPassInputIterator, (T)) { BOOST_CONCEPT_USAGE(
      |                                                  ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:90:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:90:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:91:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:91:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:92:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:92:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:93:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:93:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::bidir_adj_list_traversal_tag; Y = boost::incidence_graph_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::lvalue_property_map_tag, boost::readable_property_map_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::lvalue_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::lvalue_property_map_tag, boost::readable_property_map_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:148:7:   required from ‘void boost::ReadablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/property_map/property_map.hpp:206:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:206:17: note: in a call to non-static member function ‘boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag>::~ConvertibleConcept()’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |                 ^~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:206:3: note: in expansion of macro ‘BOOST_concept’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::lvalue_property_map_tag, boost::writable_property_map_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::lvalue_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::lvalue_property_map_tag, boost::writable_property_map_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:180:7:   required from ‘void boost::WritablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::WritablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::WritablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::WritablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::WritablePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/property_map/property_map.hpp:207:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:206:17: note: in a call to non-static member function ‘boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag>::~ConvertibleConcept()’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |                 ^~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:206:3: note: in expansion of macro ‘BOOST_concept’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::lvalue_property_map_tag, boost::read_write_property_map_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::read_write_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::lvalue_property_map_tag; Y = boost::read_write_property_map_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50:   required from ‘struct boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   52 |     BOOST_concept(MultiPassInputIterator, (T)) { BOOST_CONCEPT_USAGE(
      |                                                  ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:239:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:239:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::bidir_adj_list_traversal_tag; Y = boost::edge_list_graph_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<long unsigned int> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<long unsigned int>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DefaultConstructible<long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DefaultConstructible<long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DefaultConstructible<long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::DefaultConstructible<long unsigned int>)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:68:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<long unsigned int>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::DefaultConstructible<long unsigned int>]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:68:9:   required from ‘boost::concepts::Graph<G>::~Graph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/concept/usage.hpp:20:48:   required from ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:66:5:   required from ‘struct boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = long unsigned int]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<long unsigned int> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<long unsigned int>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::EqualityComparable<long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::EqualityComparable<long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::EqualityComparable<long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::EqualityComparable<long unsigned int>)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:69:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<long unsigned int>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::EqualityComparable<long unsigned int>]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:69:9:   required from ‘boost::concepts::Graph<G>::~Graph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/concept/usage.hpp:20:48:   required from ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:66:5:   required from ‘struct boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = long unsigned int]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<long unsigned int> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<long unsigned int>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Assignable<long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Assignable<long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Assignable<long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Assignable<long unsigned int>)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:70:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<long unsigned int>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Assignable<long unsigned int>]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:70:9:   required from ‘boost::concepts::Graph<G>::~Graph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/concept/usage.hpp:20:48:   required from ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:66:5:   required from ‘struct boost::concepts::Graph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘struct boost::concepts::IncidenceGraph<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = long unsigned int]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50:   required from ‘struct boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   52 |     BOOST_concept(MultiPassInputIterator, (T)) { BOOST_CONCEPT_USAGE(
      |                                                  ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::DefaultConstructible<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:90:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::EqualityComparable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:91:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Assignable<boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:92:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::incidence_graph_tag>)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:93:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::bidir_adj_list_traversal_tag; Y = boost::incidence_graph_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::lvalue_property_map_tag, boost::readable_property_map_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::lvalue_property_map_tag, boost::readable_property_map_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::lvalue_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::readable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::lvalue_property_map_tag; Y = boost::readable_property_map_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::lvalue_property_map_tag, boost::writable_property_map_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::lvalue_property_map_tag, boost::writable_property_map_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::lvalue_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::lvalue_property_map_tag, boost::writable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::lvalue_property_map_tag; Y = boost::writable_property_map_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50:   required from ‘struct boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:52:50: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   52 |     BOOST_concept(MultiPassInputIterator, (T)) { BOOST_CONCEPT_USAGE(
      |                                                  ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::bidir_adj_list_traversal_tag, boost::edge_list_graph_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:239:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::bidir_adj_list_traversal_tag; Y = boost::edge_list_graph_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = char [2]; Range2T = char [3]]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:71:38:   required from ‘std::string boost::escape_dot_string(const T&) [with T = std::__cxx11::basic_string<char>; std::string = std::__cxx11::basic_string<char>]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:270:54:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >, boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = char [2]; Range2T = char [3]]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:71:38:   required from ‘std::string boost::escape_dot_string(const T&) [with T = std::__cxx11::basic_string<char>; std::string = std::__cxx11::basic_string<char>]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:270:54:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::DFSVisitorConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:130:9:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; ColorMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/topological_sort.hpp:16,
                 from GatingHierarchy.cpp:7:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:39:10: note: in a call to non-static member function ‘void boost::DFSVisitorConcept<Visitor, Graph>::constraints() [with Visitor = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
   39 |     void constraints()
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::BFSVisitorConcept<cytolib::custom_bfs_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’:
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:65:5:   required from ‘void boost::breadth_first_visit(const IncidenceGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; SourceIterator = long unsigned int*]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from GatingHierarchy.cpp:8:
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:37:10: note: in a call to non-static member function ‘void boost::BFSVisitorConcept<Visitor, Graph>::constraints() [with Visitor = cytolib::custom_bfs_visitor; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
   37 |     void constraints()
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:66:5:   required from ‘void boost::breadth_first_visit(const IncidenceGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; SourceIterator = long unsigned int*]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:205:10: note: in a call to non-static member function ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  205 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<long unsigned int>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<long unsigned int> >]’
/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<long unsigned int>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DefaultConstructible<long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DefaultConstructible<long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DefaultConstructible<long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = long unsigned int]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<long unsigned int>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<long unsigned int> >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<long unsigned int>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::EqualityComparable<long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::EqualityComparable<long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::EqualityComparable<long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = long unsigned int]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<long unsigned int>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<long unsigned int> >]’
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<long unsigned int>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Assignable<long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Assignable<long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Assignable<long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = long unsigned int]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:512:7:   required from ‘struct boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:53:35:   required from ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:512:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  512 |       BOOST_CONCEPT_USAGE(InputIterator)
      |       ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:512:7:   required from ‘struct boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >)>’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:53:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:53:35:   required from ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:512:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  512 |       BOOST_CONCEPT_USAGE(InputIterator)
      |       ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >’
/tmp/built/BH/include/boost/concept_check.hpp:165:3:   required from ‘struct boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:41:9:   required from ‘void boost::DFSVisitorConcept<Visitor, Graph>::constraints() [with Visitor = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::DFSVisitorConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::DFSVisitorConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::DFSVisitorConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:165:17: note: in a call to non-static member function ‘boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >::~CopyConstructibleConcept()’
  165 |   BOOST_concept(CopyConstructible,(TT))
      |                 ^~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:165:3: note: in expansion of macro ‘BOOST_concept’
  165 |   BOOST_concept(CopyConstructible,(TT))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; ColorMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; ColorMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:205:10: note: in a call to non-static member function ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  205 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<cytolib::custom_bfs_visitor> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<cytolib::custom_bfs_visitor>’
/tmp/built/BH/include/boost/concept_check.hpp:165:3:   required from ‘struct boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<cytolib::custom_bfs_visitor>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor>]’:
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:41:9:   required from ‘void boost::BFSVisitorConcept<Visitor, Graph>::constraints() [with Visitor = cytolib::custom_bfs_visitor; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::BFSVisitorConcept<cytolib::custom_bfs_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::BFSVisitorConcept<cytolib::custom_bfs_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::BFSVisitorConcept<cytolib::custom_bfs_visitor, boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:165:17: note: in a call to non-static member function ‘boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor>::~CopyConstructibleConcept()’
  165 |   BOOST_concept(CopyConstructible,(TT))
      |                 ^~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:165:3: note: in expansion of macro ‘BOOST_concept’
  165 |   BOOST_concept(CopyConstructible,(TT))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::ReadablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:206:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:147:10: note: in a call to non-static member function ‘void boost::ReadablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  147 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::WritablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:207:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:179:10: note: in a call to non-static member function ‘void boost::WritablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  179 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::read_write_property_map_tag, boost::read_write_property_map_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::read_write_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::read_write_property_map_tag, boost::read_write_property_map_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:208:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:206:17: note: in a call to non-static member function ‘boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag>::~ConvertibleConcept()’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |                 ^~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:206:3: note: in expansion of macro ‘BOOST_concept’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:512:7:   required from ‘struct boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:512:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  512 |       BOOST_CONCEPT_USAGE(InputIterator)
      |       ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept_check.hpp:502:3:   required from ‘struct boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >]’
/tmp/built/BH/include/boost/concept_check.hpp:512:7:   required from ‘struct boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:512:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  512 |       BOOST_CONCEPT_USAGE(InputIterator)
      |       ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >’
/tmp/built/BH/include/boost/concept_check.hpp:165:3:   required from ‘struct boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::CopyConstructibleConcept<boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::ReadablePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:206:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:147:10: note: in a call to non-static member function ‘void boost::ReadablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  147 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::WritablePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:207:7:   required from ‘void boost::ReadWritePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadWritePropertyMapConcept<boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:134:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:397:42:   required from ‘void boost::graph::detail::depth_first_search_impl<Graph>::operator()(const Graph&, const ArgPack&) const [with ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:406:5:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type boost::graph::depth_first_search_with_named_params(const Param0&, const ArgPack&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ArgPack = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const ArgPack&)>::type = void]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:409:1:   required from ‘typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type boost::depth_first_search(const Param0&, const boost::bgl_named_params<T, Tag, Base>&) [with Param0 = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > >; T = boost::graph_visitor_t; R = boost::bgl_named_params<int, boost::buffer_param_t>; typename boost::result_of<boost::graph::detail::depth_first_search_impl<Param0>(Param0, const typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type&)>::type = void; typename boost::detail::convert_bgl_params_to_boost_parameter<boost::bgl_named_params<T, Tag, Base> >::type = boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor, const boost::topo_sort_visitor<std::back_insert_iterator<std::vector<long unsigned int> > > >, boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::buffer, const int>, boost::parameter::aux::empty_arg_list, std::integral_constant<bool, true> >, std::integral_constant<bool, true> >]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:69:23:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator, const boost::bgl_named_params<P, T, R>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >; P = int; T = boost::buffer_param_t; R = boost::no_property]’
/tmp/built/BH/include/boost/graph/topological_sort.hpp:75:21:   required from ‘void boost::topological_sort(VertexListGraph&, OutputIterator) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; OutputIterator = std::back_insert_iterator<std::vector<long unsigned int> >]’
GatingHierarchy.cpp:975:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/graph/adjacency_list.hpp:27,
                 from ../inst/include/cytolib/populationTree.hpp:14,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/property_map/property_map.hpp:179:10: note: in a call to non-static member function ‘void boost::WritablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::shared_array_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
  179 |     void constraints() {
      |          ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<cytolib::custom_bfs_visitor>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<cytolib::custom_bfs_visitor> >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<cytolib::custom_bfs_visitor>’
/tmp/built/BH/include/boost/concept_check.hpp:165:3:   required from ‘struct boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::CopyConstructibleConcept<cytolib::custom_bfs_visitor> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = cytolib::custom_bfs_visitor]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::read_write_property_map_tag, boost::readable_property_map_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::read_write_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::read_write_property_map_tag, boost::readable_property_map_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:148:7:   required from ‘void boost::ReadablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ReadablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ReadablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ReadablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::ReadablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/property_map/property_map.hpp:206:7:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:206:17: note: in a call to non-static member function ‘boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag>::~ConvertibleConcept()’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |                 ^~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:206:3: note: in expansion of macro ‘BOOST_concept’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::read_write_property_map_tag, boost::writable_property_map_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::read_write_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::read_write_property_map_tag, boost::writable_property_map_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag>]’:
/tmp/built/BH/include/boost/property_map/property_map.hpp:180:7:   required from ‘void boost::WritablePropertyMapConcept<PMap, Key>::constraints() [with PMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; Key = long unsigned int]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::WritablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::WritablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::WritablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::WritablePropertyMapConcept<boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >, long unsigned int>)>’
/tmp/built/BH/include/boost/property_map/property_map.hpp:207:7:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/detail/extract_optional_type.hpp:18,
                 from /tmp/built/BH/include/boost/range/mutable_iterator.hpp:21,
                 from /tmp/built/BH/include/boost/range/iterator.hpp:20,
                 from /tmp/built/BH/include/boost/range/begin.hpp:20,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:206:17: note: in a call to non-static member function ‘boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag>::~ConvertibleConcept()’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |                 ^~~~~~~~~~~
/tmp/built/BH/include/boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
/tmp/built/BH/include/boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
/tmp/built/BH/include/boost/concept_check.hpp:206:3: note: in expansion of macro ‘BOOST_concept’
  206 |   BOOST_concept(Convertible,(X)(Y))
      |   ^~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::read_write_property_map_tag, boost::read_write_property_map_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::read_write_property_map_tag, boost::read_write_property_map_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::read_write_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::read_write_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::read_write_property_map_tag; Y = boost::read_write_property_map_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SignedInteger<long int>]’:
/tmp/built/BH/include/boost/concept_check.hpp:514:9:   required from ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:53:35:   required from ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept_check.hpp:107:22: note: in a call to non-static member function ‘boost::SignedInteger<long int>::~SignedInteger()’
  107 |   template <> struct SignedInteger<long> {};
      |                      ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>)>’
/tmp/built/BH/include/boost/concept_check.hpp:515:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>]’:
/tmp/built/BH/include/boost/concept_check.hpp:515:9:   required from ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::InputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:53:35:   required from ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>; Y = std::input_iterator_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>)>’
/tmp/built/BH/include/boost/concept_check.hpp:515:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>]’:
/tmp/built/BH/include/boost/concept_check.hpp:515:9:   required from ‘boost::InputIterator<TT>::~InputIterator() [with TT = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::InputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:53:35:   required from ‘boost::concepts::MultiPassInputIterator<T>::~MultiPassInputIterator() [with T = boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int>]’
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::undirected_edge_iter<std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>; Y = std::input_iterator_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::read_write_property_map_tag, boost::readable_property_map_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::read_write_property_map_tag, boost::readable_property_map_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::read_write_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::readable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::read_write_property_map_tag; Y = boost::readable_property_map_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::read_write_property_map_tag, boost::writable_property_map_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::read_write_property_map_tag, boost::writable_property_map_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::read_write_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept_check.hpp:206:3:   required from ‘struct boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::ConvertibleConcept<boost::read_write_property_map_tag, boost::writable_property_map_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:136:24:   required from ‘void boost::breadth_first_search(const VertexListGraph&, SourceIterator, SourceIterator, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; SourceIterator = long unsigned int*; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:147:25:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, Buffer&, BFSVisitor, ColorMap) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; Buffer = boost::queue<long unsigned int, std::deque<long unsigned int, std::allocator<long unsigned int> > >; BFSVisitor = cytolib::custom_bfs_visitor; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:262:29:   required from ‘void boost::detail::bfs_helper(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, ColorMap, BFSVisitor, const boost::bgl_named_params<P, T, R>&, mpl_::false_) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; ColorMap = boost::two_bit_color_map<boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; BFSVisitor = cytolib::custom_bfs_visitor; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int; mpl_::false_ = mpl_::bool_<false>]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:309:23:   required from ‘static void boost::detail::bfs_dispatch<boost::param_not_found>::apply(VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&, boost::param_not_found) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/breadth_first_search.hpp:339:37:   required from ‘void boost::breadth_first_search(const VertexListGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, const boost::bgl_named_params<T, Tag, Base>&) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; P = cytolib::custom_bfs_visitor; T = boost::graph_visitor_t; R = boost::no_property; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:986:32:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::read_write_property_map_tag; Y = boost::writable_property_map_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>, std::input_iterator_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::MultiPassInputIterator<boost::detail::out_edge_iter<__gnu_cxx::__normal_iterator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>*, std::vector<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property>, std::allocator<boost::detail::stored_edge_iter<long unsigned int, std::_List_iterator<boost::list_edge<long unsigned int, boost::no_property> >, boost::no_property> > > >, long unsigned int, boost::detail::edge_desc_impl<boost::bidirectional_tag, long unsigned int>, long int> >]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:89:9:   required from ‘boost::concepts::IncidenceGraph<G>::~IncidenceGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:75:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::IncidenceGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:129:9:   required from ‘void boost::detail::depth_first_visit_impl(const IncidenceGraph&, typename boost::graph_traits<Graph>::vertex_descriptor, DFSVisitor&, ColorMap, TerminatorFunc) [with IncidenceGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; TerminatorFunc = boost::detail::nontruth2; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
/tmp/built/BH/include/boost/graph/depth_first_search.hpp:286:39:   required from ‘void boost::depth_first_search(const VertexListGraph&, DFSVisitor, ColorMap, typename boost::graph_traits<Graph>::vertex_descriptor) [with VertexListGraph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; DFSVisitor = cytolib::phylo_visitor; ColorMap = boost::vector_property_map<boost::default_color_type, boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int> >; typename boost::graph_traits<Graph>::vertex_descriptor = long unsigned int]’
GatingHierarchy.cpp:1601:28:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::random_access_traversal_tag>; Y = std::input_iterator_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>, std::input_iterator_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:235:9:   required from ‘boost::concepts::EdgeListGraph<G>::~EdgeListGraph() [with G = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>]’
/tmp/built/BH/include/boost/graph/graph_concepts.hpp:226:1:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::EdgeListGraphConcept<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property> >]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:265:5:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, VertexID, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; VertexID = boost::vec_adj_list_vertex_id_map<cytolib::nodeProperties, long unsigned int>; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:302:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexPropertiesWriter, EdgePropertiesWriter, GraphPropertiesWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexPropertiesWriter = cytolib::OurVertexPropertyWriterR; EdgePropertiesWriter = boost::default_writer; GraphPropertiesWriter = boost::default_writer; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
/tmp/built/BH/include/boost/graph/graphviz.hpp:322:19:   required from ‘void boost::write_graphviz(std::ostream&, const Graph&, VertexWriter, typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type) [with Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, cytolib::nodeProperties, boost::no_property>; VertexWriter = cytolib::OurVertexPropertyWriterR; std::ostream = std::basic_ostream<char>; typename boost::enable_if_c<boost::is_base_and_derived<boost::vertex_list_graph_tag, typename boost::graph_traits<Graph>::traversal_category>::value, boost::graph::detail::no_parameter>::type = boost::graph::detail::no_parameter; typename boost::graph_traits<Graph>::traversal_category = boost::bidir_adj_list_traversal_tag]’
GatingHierarchy.cpp:889:24:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::detail::iterator_category_with_traversal<std::input_iterator_tag, boost::iterators::bidirectional_traversal_tag>; Y = std::input_iterator_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from GatingHierarchy.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/deque.tcc:426:21:   required from ‘void std::deque<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_deque.h:985:23:   required from ‘std::deque<_Tp, _Alloc>::deque(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::deque<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::deque<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
GatingHierarchy.cpp:1022:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c GatingSet.cpp -o GatingSet.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from ../inst/include/cytolib/populationTree.hpp:13,
                 from ../inst/include/cytolib/GatingHierarchy.hpp:17,
                 from ../inst/include/cytolib/GatingSet.hpp:14,
                 from GatingSet.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c H5CytoFrame.cpp -o H5CytoFrame.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/H5CytoFrame.hpp:12,
                 from H5CytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c MemCytoFrame.cpp -o MemCytoFrame.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >; IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
MemCytoFrame.cpp:490:18:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = char [2]; Range2T = char [2]]’
MemCytoFrame.cpp:960:23:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >, boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = char [2]; Range2T = char [2]]’
MemCytoFrame.cpp:960:23:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = cytolib::MemCytoFrame::string_to_keywords(std::string, bool)::<lambda(char)>]’
MemCytoFrame.cpp:120:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/11/ios:40,
                 from /usr/include/c++/11/istream:38,
                 from /usr/include/c++/11/fstream:38,
                 from ../inst/include/cytolib/readFCSHeader.hpp:13,
                 from ../inst/include/cytolib/CytoFrame.hpp:13,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from MemCytoFrame.cpp:3:
In static member function ‘static std::char_traits<char>::char_type* std::char_traits<char>::copy(std::char_traits<char>::char_type*, const char_type*, std::size_t)’,
    inlined from ‘static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.h:359:21,
    inlined from ‘static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.h:354:7,
    inlined from ‘static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.h:406:16,
    inlined from ‘void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.tcc:225:25,
    inlined from ‘void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.h:255:23,
    inlined from ‘void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.h:274:20,
    inlined from ‘std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’ at /usr/include/c++/11/bits/basic_string.h:521:21,
    inlined from ‘void cytolib::MemCytoFrame::parse_fcs_header(std::ifstream&, int)’ at MemCytoFrame.cpp:38:20:
/usr/include/c++/11/bits/char_traits.h:437:56: warning: ‘void* __builtin_memcpy(void*, const void*, long unsigned int)’ reading 8 bytes from a region of size 2 [-Wstringop-overread]
  437 |         return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      |                                        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c POPINDICES.cpp -o POPINDICES.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from POPINDICES.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c calibrationTable.cpp -o calibrationTable.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compensation.cpp -o compensation.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from compensation.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ellipse2points.cpp -o ellipse2points.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c gate.cpp -o gate.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from gate.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c global.cpp -o global.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:179:44:   required from ‘void boost::algorithm::replace_first(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = char [6]; Range2T = char [1]]’
global.cpp:39:23:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from global.cpp:8:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >, boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:179:44:   required from ‘void boost::algorithm::replace_first(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = char [6]; Range2T = char [1]]’
global.cpp:39:23:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from global.cpp:8:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from global.cpp:8:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from global.cpp:8:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from global.cpp:8:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:41:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
global.cpp:190:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c in_polygon.cpp -o in_polygon.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c nodeProperties.cpp -o nodeProperties.o
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
../inst/include/cytolib/CytoFrame.hpp:354:25:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from ../inst/include/cytolib/transformation.hpp:18,
                 from ../inst/include/cytolib/compensation.hpp:15,
                 from ../inst/include/cytolib/CytoFrame.hpp:14,
                 from ../inst/include/cytolib/MemCytoFrame.hpp:12,
                 from ../inst/include/cytolib/gate.hpp:12,
                 from ../inst/include/cytolib/POPINDICES.hpp:14,
                 from ../inst/include/cytolib/nodeProperties.hpp:13,
                 from nodeProperties.cpp:3:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
../inst/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c spline.cpp -o spline.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c trans_group.cpp -o trans_group.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -DROUT -I../inst/include -DBOOST_NO_AUTO_PTR -DBOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF -DBOOST_FILESYSTEM_SINGLE_THREADED  -I'/tmp/built/BH/include' -I'/tmp/built/RProtoBufLib/include' -I'/tmp/built/Rhdf5lib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c transformation.cpp -o transformation.o
mkdir -p "/tmp/built/00LOCK-cytolib/00new/cytolib/lib"
ar rs "/tmp/built/00LOCK-cytolib/00new/cytolib/lib/libcytolib.a" CytoFrame.o CytoFrameView.o CytoVFS.o GatingHierarchy.o GatingSet.o H5CytoFrame.o MemCytoFrame.o POPINDICES.o calibrationTable.o compensation.o dummy.o ellipse2points.o gate.o global.o in_polygon.o nodeProperties.o spline.o trans_group.o transformation.o boost/libs/filesystem/src/codecvt_error_category.o boost/libs/filesystem/src/directory.o boost/libs/filesystem/src/exception.o boost/libs/filesystem/src/operations.o boost/libs/filesystem/src/path.o boost/libs/filesystem/src/path_traits.o boost/libs/filesystem/src/portability.o boost/libs/filesystem/src/unique_path.o boost/libs/filesystem/src/utf8_codecvt_facet.o boost/libs/filesystem/src/windows_file_codecvt.o boost/libs/system/src/error_code.o
ar: creating /tmp/built/00LOCK-cytolib/00new/cytolib/lib/libcytolib.a
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o cytolib.so dummy.o -L/usr/local/lib/R/lib -lR
installing to /tmp/built/00LOCK-cytolib/00new/cytolib/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘cytolib’ as ‘cytolib_2.10.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (cytolib)
* installing *source* package ‘S4Vectors’ ...
** using staged installation
** libs
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c AEbufs.c -o AEbufs.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DataFrame_class.c -o DataFrame_class.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Hits_class.c -o Hits_class.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c LLint_class.c -o LLint_class.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c List_class.c -o List_class.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c R_init_S4Vectors.c -o R_init_S4Vectors.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Rle_class.c -o Rle_class.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Rle_utils.c -o Rle_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SEXP_utils.c -o SEXP_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SimpleList_class.c -o SimpleList_class.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c anyMissing.c -o anyMissing.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c character_utils.c -o character_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c eval_utils.c -o eval_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c hash_utils.c -o hash_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c integer_utils.c -o integer_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c logical_utils.c -o logical_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c map_ranges_to_runs.c -o map_ranges_to_runs.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c raw_utils.c -o raw_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c safe_arithm.c -o safe_arithm.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sort_utils.c -o sort_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c subsetting_utils.c -o subsetting_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c vector_utils.c -o vector_utils.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o S4Vectors.so AEbufs.o DataFrame_class.o Hits_class.o LLint_class.o List_class.o R_init_S4Vectors.o Rle_class.o Rle_utils.o SEXP_utils.o SimpleList_class.o anyMissing.o character_utils.o eval_utils.o hash_utils.o integer_utils.o logical_utils.o map_ranges_to_runs.o raw_utils.o safe_arithm.o sort_utils.o subsetting_utils.o vector_utils.o -L/usr/local/lib/R/lib -lR
installing to /tmp/built/00LOCK-S4Vectors/00new/S4Vectors/libs
** R
** inst
** byte-compile and prepare package for lazy loading
in method for ‘normalizeSingleBracketReplacementValue’ with signature ‘"List"’: no definition for class “List”
Creating a new generic function for ‘unname’ in package ‘S4Vectors’
Creating a new generic function for ‘expand.grid’ in package ‘S4Vectors’
Creating a new generic function for ‘findMatches’ in package ‘S4Vectors’
Creating a generic function for ‘setequal’ from package ‘base’ in package ‘S4Vectors’
in method for ‘coerce’ with signature ‘"Hits","DFrame"’: no definition for class “DFrame”
Creating a generic function for ‘as.factor’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘tabulate’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘cov’ from package ‘stats’ in package ‘S4Vectors’
Creating a generic function for ‘cor’ from package ‘stats’ in package ‘S4Vectors’
Creating a generic function for ‘smoothEnds’ from package ‘stats’ in package ‘S4Vectors’
Creating a generic function for ‘runmed’ from package ‘stats’ in package ‘S4Vectors’
Creating a generic function for ‘nchar’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘substr’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘substring’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘chartr’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘tolower’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘toupper’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘sub’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘gsub’ from package ‘base’ in package ‘S4Vectors’
Creating a generic function for ‘nlevels’ from package ‘base’ in package ‘S4Vectors’
in method for ‘coerce’ with signature ‘"data.table","DFrame"’: no definition for class “data.table”
Creating a generic function for ‘complete.cases’ from package ‘stats’ in package ‘S4Vectors’
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘S4Vectors’ as ‘S4Vectors_0.36.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (S4Vectors)
* installing *source* package ‘Biobase’ ...
** using staged installation
** libs
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Rinit.c -o Rinit.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c anyMissing.c -o anyMissing.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c envir.c -o envir.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c matchpt.c -o matchpt.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c rowMedians.c -o rowMedians.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sublist_extract.c -o sublist_extract.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o Biobase.so Rinit.o anyMissing.o envir.o matchpt.o rowMedians.o sublist_extract.o -L/usr/local/lib/R/lib -lR
installing to /tmp/built/00LOCK-Biobase/00new/Biobase/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘Biobase’ as ‘Biobase_2.58.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Biobase)
* installing *binary* package ‘latticeExtra’ ...
* ‘latticeExtra’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘latticeExtra’ as ‘latticeExtra_0.6-30_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (latticeExtra)
* installing *source* package ‘flowCore’ ...
** using staged installation
** libs
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c FastLogicle.cpp -o FastLogicle.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Hyperlog.cpp -o Hyperlog.o
Hyperlog.cpp: In constructor ‘Hyperlog::IllegalArgument::IllegalArgument(double)’:
Hyperlog.cpp:47:47: warning: ‘Illegal argument value ’ directive output truncated writing 23 bytes into a region of size 8 [-Wformat-truncation=]
   47 |     snprintf(buffer, sizeof(buffer), "Illegal argument value %.17g", value);
      |                                       ~~~~~~~~^~~~~~~~~~~~~~~
Hyperlog.cpp:47:38: note: assuming directive output of 23 bytes
   47 |     snprintf(buffer, sizeof(buffer), "Illegal argument value %.17g", value);
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:894,
                 from /usr/include/c++/11/cstdio:42,
                 from /usr/local/lib/R/include/R.h:40,
                 from zeroin.h:14,
                 from Hyperlog.cpp:4:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:71:35: note: ‘__builtin___snprintf_chk’ output between 25 and 48 bytes into a destination of size 8
   71 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   72 |                                    __glibc_objsize (__s), __fmt,
      |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   73 |                                    __va_arg_pack ());
      |                                    ~~~~~~~~~~~~~~~~~
Hyperlog.cpp: In constructor ‘Hyperlog::IllegalArgument::IllegalArgument(int)’:
Hyperlog.cpp:53:47: warning: ‘Illegal argument value ’ directive output truncated writing 23 bytes into a region of size 8 [-Wformat-truncation=]
   53 |     snprintf(buffer, sizeof(buffer), "Illegal argument value %d", value);
      |                                       ~~~~~~~~^~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:894,
                 from /usr/include/c++/11/cstdio:42,
                 from /usr/local/lib/R/include/R.h:40,
                 from zeroin.h:14,
                 from Hyperlog.cpp:4:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:71:35: note: ‘__builtin___snprintf_chk’ output between 25 and 35 bytes into a destination of size 8
   71 |   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   72 |                                    __glibc_objsize (__s), __fmt,
      |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   73 |                                    __va_arg_pack ());
      |                                    ~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c Logicle.cpp -o Logicle.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c biexponential.cpp -o biexponential.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c convertRawBytes.cpp -o convertRawBytes.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cpp11.cpp -o cpp11.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fcsTextParse.cpp -o fcsTextParse.o
In file included from /tmp/built/BH/include/boost/bind/mem_fn.hpp:25,
                 from /tmp/built/BH/include/boost/mem_fn.hpp:22,
                 from /tmp/built/BH/include/boost/function/detail/prologue.hpp:18,
                 from /tmp/built/BH/include/boost/function.hpp:30,
                 from /tmp/built/BH/include/boost/algorithm/string/detail/find_iterator.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:24,
                 from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:27,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/get_pointer.hpp:48:40: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
   48 | template<class T> T * get_pointer(std::auto_ptr<T> const& p)
      |                                        ^~~~~~~~
In file included from /usr/include/c++/11/bits/locale_conv.h:41,
                 from /usr/include/c++/11/locale:43,
                 from /tmp/built/BH/include/boost/algorithm/string/classification.hpp:15,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:23,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/usr/include/c++/11/bits/unique_ptr.h:57:28: note: declared here
   57 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:98:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
fcsTextParse.cpp:90:22:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/find_format.hpp:103:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = std::__cxx11::basic_string<char>; Range2T = std::__cxx11::basic_string<char>]’
fcsTextParse.cpp:90:22:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:81:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:65:52: warning: ‘this’ pointer is null [-Wnonnull]
   65 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:26,
                 from /tmp/built/BH/include/boost/algorithm/string/split.hpp:16,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:23,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >; IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’:
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/range/iterator_range_core.hpp:644:32:   required from ‘bool boost::operator==(const boost::iterator_range<IteratorT>&, const boost::iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/find_iterator.hpp:359:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:649:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:981:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC1 = boost::iterators::forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC2 = boost::iterators::forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/tmp/built/BH/include/boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/built/BH/include/boost/range/functions.hpp:20,
                 from /tmp/built/BH/include/boost/range/iterator_range_core.hpp:38,
                 from /tmp/built/BH/include/boost/range/iterator_range.hpp:13,
                 from /tmp/built/BH/include/boost/range/as_literal.hpp:18,
                 from /tmp/built/BH/include/boost/algorithm/string/trim.hpp:19,
                 from /tmp/built/BH/include/boost/algorithm/string.hpp:19,
                 from fcsTextParse.cpp:9:
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = const std::__cxx11::basic_string<char>&; PredicateT = boost::algorithm::detail::is_any_ofF<char>]’
/tmp/built/cytolib/include/cytolib/compensation.hpp:55:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’
/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/built/BH/include/boost/iterator/iterator_facade.hpp:982:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const boost::iterators::iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const boost::iterators::iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = boost::iterators::forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = boost::iterators::forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/11/bits/stl_vector.h:1562:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/11/bits/stl_vector.h:657:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::use_default, boost::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
/tmp/built/BH/include/boost/algorithm/string/iter_find.hpp:186:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; FinderT = boost::algorithm::detail::token_finderF<fcsTextParse(std::string, bool)::<lambda(char)> >]’
/tmp/built/BH/include/boost/algorithm/string/split.hpp:158:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&&, PredicateT, boost::algorithm::token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >; RangeT = std::__cxx11::basic_string<char>&; PredicateT = fcsTextParse(std::string, bool)::<lambda(char)>]’
fcsTextParse.cpp:93:15:   required from here
/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c hyperlogTransform.cpp -o hyperlogTransform.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c inPolygon.cpp -o inPolygon.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c inPolytope.cpp -o inPolytope.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c logicleTransform.cpp -o logicleTransform.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c poly_centroid.cpp -o poly_centroid.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sortBytes.cpp -o sortBytes.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c uint2double.cpp -o uint2double.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/cpp11/include' -I'/tmp/built/BH/include' -I'/tmp/built/cytolib/include' -I'/tmp/built/RProtoBufLib/include' -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c zeroin.cpp -o zeroin.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o flowCore.so FastLogicle.o Hyperlog.o Logicle.o biexponential.o convertRawBytes.o cpp11.o fcsTextParse.o hyperlogTransform.o inPolygon.o inPolytope.o logicleTransform.o poly_centroid.o sortBytes.o uint2double.o zeroin.o /tmp/built/cytolib/lib/libcytolib.a -L/usr/local/lib/R/lib -lR
if [ `uname -s` = 'Darwin' ]; then install_name_tool -change /usr/local/clang4/lib/libc++.1.dylib /usr/lib/libc++.1.dylib flowCore.so; fi
installing to /tmp/built/00LOCK-flowCore/00new/flowCore/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘flowCore’ as ‘flowCore_2.10.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (flowCore)
* installing *source* package ‘flowViz’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
in method for ‘densityplot’ with signature ‘x="formula",data="view"’: no definition for class “view”
in method for ‘densityplot’ with signature ‘x="formula",data="ncdfFlowSet"’: no definition for class “ncdfFlowSet”
in method for ‘densityplot’ with signature ‘x="formula",data="ncdfFlowList"’: no definition for class “ncdfFlowList”
in method for ‘histogram’ with signature ‘x="formula",data="ncdfFlowSet"’: no definition for class “ncdfFlowSet”
in method for ‘histogram’ with signature ‘x="formula",data="ncdfFlowList"’: no definition for class “ncdfFlowList”
in method for ‘glines’ with signature ‘x="norm2Filter",data="ANY"’: no definition for class “norm2Filter”
in method for ‘glines’ with signature ‘x="norm2Filter",data="logicalFilterResult"’: no definition for class “norm2Filter”
in method for ‘glines’ with signature ‘x="norm2Filter",data="flowFrame"’: no definition for class “norm2Filter”
in method for ‘glpoints’ with signature ‘x="norm2Filter",data="flowFrame",channels="character"’: no definition for class “norm2Filter”
in method for ‘glpolygon’ with signature ‘x="norm2Filter",data="ANY"’: no definition for class “norm2Filter”
in method for ‘glpolygon’ with signature ‘x="norm2Filter",data="logicalFilterResult"’: no definition for class “norm2Filter”
in method for ‘glpolygon’ with signature ‘x="norm2Filter",data="flowFrame"’: no definition for class “norm2Filter”
in method for ‘gpoints’ with signature ‘x="norm2Filter",data="flowFrame",channels="character"’: no definition for class “norm2Filter”
in method for ‘gpolygon’ with signature ‘x="norm2Filter",data="ANY"’: no definition for class “norm2Filter”
in method for ‘gpolygon’ with signature ‘x="norm2Filter",data="logicalFilterResult"’: no definition for class “norm2Filter”
in method for ‘gpolygon’ with signature ‘x="norm2Filter",data="flowFrame"’: no definition for class “norm2Filter”
in method for ‘xyplot’ with signature ‘x="formula",data="view"’: no definition for class “view”
in method for ‘xyplot’ with signature ‘x="view",data="missing"’: no definition for class “view”
in method for ‘xyplot’ with signature ‘x="formula",data="gateView"’: no definition for class “gateView”
in method for ‘xyplot’ with signature ‘x="formula",data="ncdfFlowSet"’: no definition for class “ncdfFlowSet”
in method for ‘xyplot’ with signature ‘x="formula",data="ncdfFlowList"’: no definition for class “ncdfFlowList”
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘flowViz’ as ‘flowViz_1.62.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (flowViz)
* installing *source* package ‘flowFP’ ...
** using staged installation
configure: creating ./config.status
config.status: creating src/Makevars
** libs
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c flowFP.c -o flowFP.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c split_utils.c -o split_utils.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o flowFP.so flowFP.o init.o split_utils.o -L/usr/local/lib/R/lib -lR
installing to /tmp/built/00LOCK-flowFP/00new/flowFP/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
Creating a generic function for ‘append’ from package ‘base’ in package ‘flowFP’
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘flowFP’ as ‘flowFP_1.56.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (flowFP)

The downloaded source packages are in
	‘/tmp/RtmpVOUFCj/downloaded_packages’
Old packages: 'fansi', 'fontawesome', 'fs', 'knitr', 'Rcpp', 'sass', 'vctrs',
  'yaml', 'class', 'MASS', 'spatial'

real	12m29.291s
user	11m27.299s
sys	0m57.470s
