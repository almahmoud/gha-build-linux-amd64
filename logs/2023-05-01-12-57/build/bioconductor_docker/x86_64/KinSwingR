+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''KinSwingR'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://cloud.r-project.org
Bioconductor version 3.18 (BiocManager 1.30.20), R 4.3.0 (2023-04-21)
Installing package(s) 'KinSwingR'
also installing the dependencies ‘bit’, ‘bit64’, ‘blob’, ‘plogr’, ‘gsubfn’, ‘proto’, ‘RSQLite’, ‘chron’, ‘data.table’, ‘sqldf’

trying URL 'https://cloud.r-project.org/src/contrib/bit_4.0.5.tar.gz'
Content type 'application/x-gzip' length 827745 bytes (808 KB)
==================================================
downloaded 808 KB

trying URL 'https://cloud.r-project.org/src/contrib/bit64_4.0.5.tar.gz'
Content type 'application/x-gzip' length 135091 bytes (131 KB)
==================================================
downloaded 131 KB

trying URL 'https://cloud.r-project.org/src/contrib/blob_1.2.4.tar.gz'
Content type 'application/x-gzip' length 10620 bytes (10 KB)
==================================================
downloaded 10 KB

trying URL 'https://cloud.r-project.org/src/contrib/plogr_0.2.0.tar.gz'
Content type 'application/x-gzip' length 7795 bytes
==================================================
downloaded 7795 bytes

trying URL 'https://cloud.r-project.org/src/contrib/gsubfn_0.7.tar.gz'
Content type 'application/x-gzip' length 311271 bytes (303 KB)
==================================================
downloaded 303 KB

trying URL 'https://cloud.r-project.org/src/contrib/proto_1.0.0.tar.gz'
Content type 'application/x-gzip' length 541398 bytes (528 KB)
==================================================
downloaded 528 KB

trying URL 'https://cloud.r-project.org/src/contrib/RSQLite_2.3.1.tar.gz'
Content type 'application/x-gzip' length 4149793 bytes (4.0 MB)
==================================================
downloaded 4.0 MB

trying URL 'https://cloud.r-project.org/src/contrib/chron_2.3-60.tar.gz'
Content type 'application/x-gzip' length 37322 bytes (36 KB)
==================================================
downloaded 36 KB

trying URL 'https://cloud.r-project.org/src/contrib/data.table_1.14.8.tar.gz'
Content type 'application/x-gzip' length 5338582 bytes (5.1 MB)
==================================================
downloaded 5.1 MB

trying URL 'https://cloud.r-project.org/src/contrib/sqldf_0.4-11.tar.gz'
Content type 'application/x-gzip' length 63097 bytes (61 KB)
==================================================
downloaded 61 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/KinSwingR_1.19.0.tar.gz'
Content type 'application/x-gzip' length 565843 bytes (552 KB)
==================================================
downloaded 552 KB

* installing *source* package ‘bit’ ...
** package ‘bit’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c attrutil.c -o attrutil.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c bit.c -o bit.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c chunkutil.c -o chunkutil.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c clone.c -o clone.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c integerutil.c -o integerutil.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c merge.c -o merge.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c rle.c -o rle.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sort.c -o sort.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o bit.so attrutil.o bit.o chunkutil.o clone.o init.o integerutil.o merge.o rle.o sort.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-bit/00new/bit/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘bit’ as ‘bit_4.0.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bit)
* installing *source* package ‘blob’ ...
** package ‘blob’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘blob’ as ‘blob_1.2.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (blob)
* installing *source* package ‘plogr’ ...
** package ‘plogr’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘plogr’ as ‘plogr_0.2.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (plogr)
* installing *source* package ‘proto’ ...
** package ‘proto’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘proto’ as ‘proto_1.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (proto)
* installing *source* package ‘chron’ ...
** package ‘chron’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c chron_strs.c -o chron_strs.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c unpaste.c -o unpaste.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o chron.so chron_strs.o init.o unpaste.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-chron/00new/chron/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘chron’ as ‘chron_2.3-60_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (chron)
* installing *source* package ‘data.table’ ...
** package ‘data.table’ successfully unpacked and MD5 sums checked
** using staged installation
gcc 11.3.0
zlib 1.2.11 is available ok
R CMD SHLIB supports OpenMP without any extra hint
** libs
using C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c assign.c -o assign.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c between.c -o between.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c bmerge.c -o bmerge.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c chmatch.c -o chmatch.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cj.c -o cj.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c coalesce.c -o coalesce.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c dogroups.c -o dogroups.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fastmean.c -o fastmean.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fcast.c -o fcast.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fifelse.c -o fifelse.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fmelt.c -o fmelt.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c forder.c -o forder.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c frank.c -o frank.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fread.c -o fread.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c freadR.c -o freadR.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c froll.c -o froll.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c frollR.c -o frollR.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c frolladaptive.c -o frolladaptive.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fsort.c -o fsort.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fwrite.c -o fwrite.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fwriteR.c -o fwriteR.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c gsumm.c -o gsumm.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ijoin.c -o ijoin.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c inrange.c -o inrange.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c nafill.c -o nafill.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c nqrecreateindices.c -o nqrecreateindices.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c openmp-utils.c -o openmp-utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c quickselect.c -o quickselect.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c rbindlist.c -o rbindlist.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c reorder.c -o reorder.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c shift.c -o shift.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c snprintf.c -o snprintf.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c subset.c -o subset.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c transpose.c -o transpose.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c types.c -o types.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c uniqlist.c -o uniqlist.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c utils.c -o utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c vecseq.c -o vecseq.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include   -fopenmp  -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c wrappers.c -o wrappers.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o data.table.so assign.o between.o bmerge.o chmatch.o cj.o coalesce.o dogroups.o fastmean.o fcast.o fifelse.o fmelt.o forder.o frank.o fread.o freadR.o froll.o frollR.o frolladaptive.o fsort.o fwrite.o fwriteR.o gsumm.o ijoin.o init.o inrange.o nafill.o nqrecreateindices.o openmp-utils.o quickselect.o rbindlist.o reorder.o shift.o snprintf.o subset.o transpose.o types.o uniqlist.o utils.o vecseq.o wrappers.o -fopenmp -lz -L/usr/local/lib/R/lib -lR
PKG_CFLAGS = -fopenmp
PKG_LIBS = -fopenmp -lz
if [ "data.table.so" != "data_table.so" ]; then mv data.table.so data_table.so; fi
if [ "" != "Windows_NT" ] && [ `uname -s` = 'Darwin' ]; then install_name_tool -id data_table.so data_table.so; fi
installing to /tmp/tmp/built/00LOCK-data.table/00new/data.table/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘data.table’ as ‘data.table_1.14.8_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (data.table)
* installing *source* package ‘bit64’ ...
** package ‘bit64’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c bsearch.c -o bsearch.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cache.c -o cache.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c hash64.c -o hash64.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c integer64.c -o integer64.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sort64.c -o sort64.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sortuse64.c -o sortuse64.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o bit64.so bsearch.o cache.o hash64.o init.o integer64.o sort64.o sortuse64.o -lm -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-bit64/00new/bit64/libs
** R
** data
** exec
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘bit64’ as ‘bit64_4.0.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bit64)
* installing *source* package ‘gsubfn’ ...
** package ‘gsubfn’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
Warning: no DISPLAY variable so Tk is not available
** testing if installed package can be loaded from final location
Warning: no DISPLAY variable so Tk is not available
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘gsubfn’ as ‘gsubfn_0.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gsubfn)
* installing *source* package ‘RSQLite’ ...
** package ‘RSQLite’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
using C++ compiler: ‘g++ (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbColumn.cpp -o DbColumn.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbColumnDataSource.cpp -o DbColumnDataSource.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbColumnDataSourceFactory.cpp -o DbColumnDataSourceFactory.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbColumnStorage.cpp -o DbColumnStorage.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbConnection.cpp -o DbConnection.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbDataFrame.cpp -o DbDataFrame.o
In file included from vendor/boost/smart_ptr/detail/sp_thread_sleep.hpp:22,
                 from vendor/boost/smart_ptr/detail/yield_k.hpp:23,
                 from vendor/boost/smart_ptr/detail/spinlock_gcc_atomic.hpp:14,
                 from vendor/boost/smart_ptr/detail/spinlock.hpp:42,
                 from vendor/boost/smart_ptr/detail/spinlock_pool.hpp:25,
                 from vendor/boost/smart_ptr/shared_ptr.hpp:29,
                 from vendor/boost/shared_ptr.hpp:17,
                 from DbColumn.h:9,
                 from DbDataFrame.cpp:3:
vendor/boost/config/pragma_message.hpp:24:34: note: ‘#pragma message: The practice of declaring the Bind placeholders (_1, _2, ...) in the global namespace is deprecated. Please use <boost/bind/bind.hpp> + using namespace boost::placeholders, or define BOOST_BIND_GLOBAL_PLACEHOLDERS to retain the current behavior.’
   24 | # define BOOST_PRAGMA_MESSAGE(x) _Pragma(BOOST_STRINGIZE(message(x)))
      |                                  ^~~~~~~
vendor/boost/bind.hpp:36:1: note: in expansion of macro ‘BOOST_PRAGMA_MESSAGE’
   36 | BOOST_PRAGMA_MESSAGE(
      | ^~~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, false> > >]’:
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, false> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
vendor/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
vendor/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
vendor/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >]’:
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, false> > >]’:
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, false> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
vendor/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
vendor/boost/range/concepts.hpp:152:13:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
vendor/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >]’:
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’:
vendor/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = boost::container::stable_vector_iterator<DbColumn*, false>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, true> > >]’:
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, true> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >]’:
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, true> > >]’:
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, true> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >]’:
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’:
vendor/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = boost::container::stable_vector_iterator<DbColumn*, true>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >]’:
vendor/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’:
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = boost::container::stable_vector<DbColumn>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’:
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from vendor/boost/concept/assert.hpp:35,
                 from vendor/boost/concept_check.hpp:20,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’:
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from vendor/boost/concept_check.hpp:31,
                 from vendor/boost/range/concepts.hpp:19,
                 from vendor/boost/range/size_type.hpp:20,
                 from vendor/boost/range/size.hpp:21,
                 from vendor/boost/range/functions.hpp:20,
                 from vendor/boost/ptr_container/detail/reversible_ptr_container.hpp:30,
                 from vendor/boost/ptr_container/ptr_sequence_adapter.hpp:20,
                 from vendor/boost/ptr_container/ptr_vector.hpp:20,
                 from RSQLite.h:17,
                 from pch.h:1,
                 from DbDataFrame.cpp:1:
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, false> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, false> > >]’
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = boost::container::stable_vector_iterator<DbColumn*, false>]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
vendor/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >]’
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = boost::container::stable_vector_iterator<DbColumn*, false>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, false> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, false> > >]’
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::container::stable_vector_iterator<DbColumn*, false>]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
vendor/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >]’
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, false> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = boost::container::stable_vector_iterator<DbColumn*, false>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, true> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, true> > >]’
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = boost::container::stable_vector_iterator<DbColumn*, true>]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >]’
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = boost::container::stable_vector_iterator<DbColumn*, true>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, true> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, true> > >]’
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = boost::container::stable_vector_iterator<DbColumn*, true>]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >]’
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<boost::container::stable_vector_iterator<DbColumn*, true> > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = boost::container::stable_vector_iterator<DbColumn*, true>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >]’
vendor/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<boost::container::stable_vector<DbColumn> >)>’
vendor/boost/range/size.hpp:62:9:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = boost::container::stable_vector<DbColumn>]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >]’
vendor/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > > > >’
vendor/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
vendor/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’:
vendor/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >]’
vendor/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >’
vendor/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >]’
vendor/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >::value’
vendor/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > > >’
vendor/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<std::vector<std::__cxx11::basic_string<char> > >)>’
vendor/boost/range/algorithm_ext/for_each.hpp:54:13:   required from ‘Fn2 boost::range::for_each(SinglePassRange1&, SinglePassRange2&, Fn2) [with SinglePassRange1 = boost::container::stable_vector<DbColumn>; SinglePassRange2 = std::vector<std::__cxx11::basic_string<char> >; Fn2 = boost::_bi::bind_t<void, boost::_mfi::cmf1<void, DbColumn, const cpp11::r_string&>, boost::_bi::list2<boost::arg<1>, boost::arg<2> > >]’
DbDataFrame.cpp:54:18:   required from here
vendor/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
vendor/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<std::__cxx11::basic_string<char> >]’
   37 |       ~model()
      |       ^
vendor/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c DbResult.cpp -o DbResult.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SqliteColumnDataSource.cpp -o SqliteColumnDataSource.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SqliteColumnDataSourceFactory.cpp -o SqliteColumnDataSourceFactory.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SqliteDataFrame.cpp -o SqliteDataFrame.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SqliteResult.cpp -o SqliteResult.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SqliteResultImpl.cpp -o SqliteResultImpl.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c affinity.c -o affinity.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c connection.cpp -o connection.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cpp11.cpp -o cpp11.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext-csv.c -o ext-csv.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext-math.c -o ext-math.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext-regexp.c -o ext-regexp.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext-series.c -o ext-series.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c extensions.cpp -o extensions.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c import-file.c -o import-file.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c result.cpp -o result.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c rsqlite.cpp -o rsqlite.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -I. -Ivendor -Ivendor/extensions -Ivendor/sqlite3 -DRSQLITE_USE_BUNDLED_SQLITE -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_STAT4 -DSQLITE_SOUNDEX -DSQLITE_USE_URI=1 -DSQLITE_MAX_LENGTH=2147483647 -DHAVE_USLEEP=1 -I'/tmp/tmp/built/plogr/include' -I'/usr/local/lib/R/site-library/cpp11/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c vendor/sqlite3/sqlite3.c -o vendor/sqlite3/sqlite3.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o RSQLite.so DbColumn.o DbColumnDataSource.o DbColumnDataSourceFactory.o DbColumnStorage.o DbConnection.o DbDataFrame.o DbResult.o SqliteColumnDataSource.o SqliteColumnDataSourceFactory.o SqliteDataFrame.o SqliteResult.o SqliteResultImpl.o affinity.o connection.o cpp11.o ext-csv.o ext-math.o ext-regexp.o ext-series.o extensions.o import-file.o result.o rsqlite.o vendor/sqlite3/sqlite3.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-RSQLite/00new/RSQLite/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘RSQLite’ as ‘RSQLite_2.3.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RSQLite)
* installing *source* package ‘sqldf’ ...
** package ‘sqldf’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
Warning message:
no DISPLAY variable so Tk is not available 
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
Warning: no DISPLAY variable so Tk is not available
** testing if installed package can be loaded from final location
Warning: no DISPLAY variable so Tk is not available
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘sqldf’ as ‘sqldf_0.4-11_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sqldf)
* installing *source* package ‘KinSwingR’ ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘KinSwingR’ as ‘KinSwingR_1.19.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (KinSwingR)

The downloaded source packages are in
	‘/tmp/RtmpiSI76x/downloaded_packages’
Old packages: 'MASS'

real	2m26.996s
user	2m16.899s
sys	0m11.263s
